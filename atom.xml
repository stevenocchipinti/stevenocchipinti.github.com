<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Occhipinti]]></title>
  <link href="http://blog.stevenocchipinti.com/atom.xml" rel="self"/>
  <link href="http://blog.stevenocchipinti.com/"/>
  <updated>2016-12-28T15:44:05+11:00</updated>
  <id>http://blog.stevenocchipinti.com/</id>
  <author>
    <name><![CDATA[Steven Occhipinti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Search and Replace, Vim and Git]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/search-and-replace-in-multiple-files-with-vim-and-git/"/>
    <updated>2016-12-28T14:04:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/search-and-replace-in-multiple-files-with-vim-and-git</id>
    <content type="html"><![CDATA[<p>Git provides some nice utility functionality that can make a vim development
environment much nicer. With recent updates to Vim it can now execute a command
for every item in the quickfix list (<code>:cdo</code>) and location list (<code>:ldo</code>). These
features work together quite nicely.</p>

<p>This new functionality has been introduced to vim from version 7.4.858 and is
therefore available in vim8 and also available in neovim.</p>

<h2>The Old Way</h2>

<p>Back in 2011 I wrote a
<a href="http://blog.stevenocchipinti.com/2011/05/search-and-replace-in-multiple-files.html/">post about doing search and replace across multiple files</a>
with just the basic vim functionality. It&rsquo;s quite common to use the arg list
because its easy to add to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">arg</span> *.<span class="nb">js</span>
</span><span class='line'><span class="p">:</span><span class="k">arg</span> `git <span class="k">ls</span><span class="p">-</span><span class="k">files</span>`
</span></code></pre></td></tr></table></div></figure>


<p>and it&rsquo;s easy to execute commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">argdo</span> %<span class="k">s</span><span class="sr">/foo/</span><span class="k">bar</span>/gc
</span></code></pre></td></tr></table></div></figure>


<h2>The New Way</h2>

<p>Now that we can execute a command from the quickfix and location lists it is
much easier to make larger, more controlled edits with the help of other
features or plugins.</p>

<p>If you use <code>syntastic</code> or <code>neomake</code> for linting, a compiler via the <code>:make</code>
command, the built in <code>:grep</code> or <code>:vimgrep</code> commands or any number of other
plugins that integrate with these lists, such as
<a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a>, you can take advantage of
<code>:cdo</code> and <code>:ldo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">grep</span> foo **/*.<span class="nb">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can execute commands like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>cdo <span class="k">s</span><span class="sr">/foo/</span><span class="k">bar</span>/gc
</span></code></pre></td></tr></table></div></figure>


<h2>Git Is Awesome</h2>

<p>Git is incredibly powerful and I often use a couple of features that are often
overlooked:</p>

<ul>
<li><code>git ls-files</code> - recursively list all the files in the repo</li>
<li><code>git grep</code> - grep through all the files in the repo</li>
</ul>


<p>One of the reasons these commands are so good is because by default they will
ignore the items in the <code>.gitignore</code> file.</p>

<p>I tend to work with javascript a fair bit and having an easy way to avoid those
nasty <code>node_modules</code> directories readily available is great! Best of all, these
tools are available on just about every machine I work, on including the
machines of other peoples that I pair with.</p>

<h2>My Workflow</h2>

<p>I use <code>ctrl-p</code> in vim and rather than relying on yet another third party tool
like <code>ack</code> or <code>ag</code>, I&rsquo;ve configured <code>crtl-p</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:ctrlp_user_command <span class="p">=</span> [
</span><span class='line'>\  <span class="s1">&#39;.git&#39;</span><span class="p">,</span>
</span><span class='line'>\  <span class="s1">&#39;cd %s &amp;&amp; git ls-files . -co --exclude-standard&#39;</span><span class="p">,</span>
</span><span class='line'>\  <span class="s1">&#39;find %s -type f&#39;</span>
</span><span class='line'>\]
</span></code></pre></td></tr></table></div></figure>


<p>It is super fast and I haven&rsquo;t come across a situation where I need ctrl-p for a
large enough non-git repo and <code>find</code> wasn&rsquo;t good enough for&hellip; yet!</p>

<p>If you use <a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a>, there is also
a <code>:Ggrep</code> command that behaves much like the builtin <code>:grep</code> command, but it
will ignore the <code>.gitignore</code> items. I use this quite a lot too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Ggrep foo
</span><span class='line'><span class="p">:</span>Ggrep foo **/*.<span class="nb">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can execute commands in the same manner as above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>cdo <span class="k">s</span><span class="sr">/foo/</span><span class="k">bar</span>/gc
</span></code></pre></td></tr></table></div></figure>


<p>Because I use this so often, I&rsquo;ve added the following mapping to my config to
automatically search for the token under my cursor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">g</span> :Ggrep<span class="p">!</span>  <span class="p">&lt;</span>Bar<span class="p">&gt;</span> <span class="k">copen</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Netrw Instead of NERDTree for Vim]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/using-netrw-instead-of-nerdtree-for-vim/"/>
    <updated>2016-12-28T09:36:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/using-netrw-instead-of-nerdtree-for-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to attempt to use netrw exclusively for a while instead of NERDTree.
Mainly because not everyone has NERDTree, but everyone I work with will
generally have netrw installed by default so I thought I should be become more
proficient with it.</p>

<p>This post should provide me something I can quickly refer back to when I get
stuck. Netrw has a lot of features and the help page is pretty comprehensive.
It&rsquo;s worth a quick look, at least at the table of contents. It&rsquo;s available by
typing <code>:help netrw</code>.</p>

<p>There is also a quick reference for the mapping by typing <code>:help netrw-quickmap</code>
and one for the commands by typing <code>:help netrw-quickcom</code>.</p>

<h2>Navigation</h2>

<p>Navigating around netrw is pretty intuitive, you use the arrows (or hjkl) to
move around and <code>enter</code> to open files or directories. These windows are just
like any other window in vim so most of the usual motions, etc. work except
netrw adds some default mappings. Here are the basics for navigation:</p>

<p><code>enter</code>  -  Open files/directories<br/>
<code>-</code>      -  Go up one directory<br/>
<code>u</code>      -  Go back to previously visited directory (like <code>&lt;C-o&gt;</code> in vim)<br/>
<code>U</code>      -  Go forward to subsequently visited directory (like <code>&lt;C-i&gt;</code> in vim)</p>

<p><code>enter</code> works just fine to open files and directories, but there are some other
options available too:</p>

<p><code>o</code>  -  Open file/directory in new horizontal split<br/>
<code>v</code>  -  Open file/directory in new vertical split<br/>
<code>t</code>  -  Open file/directory in new tab<br/>
<code>p</code>  -  Preview file without (moving the cursor from netrw)<br/>
<code>x</code>  -  Open the file/directory with the default system app</p>

<h2>Appearance and Behaviour</h2>

<p>One of the first things I noticed when making the switch was when you press
<code>enter</code> on a directory, instead of displaying the contents of the sub-directory
inline, it would replace the whole buffer with the contents of the
sub-directory.</p>

<p>This is because by default netrw doesn&rsquo;t use a tree to display the
files/directories, its more like doing an <code>ls</code> but you can configure netrw to
print a tree and have the same behaviour as NERDTree with this mapping:</p>

<p><code>i</code> - Cycle between different listing modes (one of them is tree mode)</p>

<ul>
<li>In normal mode, <code>enter</code> will move into and show the given file/directory</li>
<li>In tree mode, <code>enter</code> will show the contents of the sub-directory in addition</li>
</ul>


<p>While netrw doesn&rsquo;t look as nice as NERDTree, it still has a lot of options to
customize the way it looks and works.</p>

<p><code>I</code>   -  Toggle the banner<br/>
<code>c</code>   -  Make the browsing directory the current working directory<br/>
<code>gn</code>  -  Make the directory under the cursor the top of the tree<br/>
<code>gh</code>  -  Toggle hidden files on or off<br/>
<code>a</code>   -  Cycle between all files, not hidden files or just hidden files visible<br/>
<code>s</code>   -  Cycle sort order between name, time or filesize<br/>
<code>r</code>   -  Reverse sort order</p>

<h2>File Operations</h2>

<p>It&rsquo;s also pretty easy to do basic file operations:</p>

<p><code>%</code>   -  Create a new file<br/>
<code>d</code>   -  Create a new directory<br/>
<code>D</code>   -  Delete the file/directory under the cursor (or marked files/dirs)<br/>
<code>R</code>   -  Rename/move file/directory</p>

<p>Copying files however is a little more involved. You need to mark the files you
want to copy, mark the destination, then execute the operation (a little
tedious):</p>

<p><code>mf</code>  -  Toggle whether the file/directory is marked<br/>
<code>mt</code>  -  Mark the directory under the cursor as the copy target<br/>
<code>mc</code>  -  Execute the copy operation<br/>
<code>mu</code>  -  Unmark all marked items</p>

<h2>Commands</h2>

<p>To open netrw is easy. You can use all the same commands you would use to open a
file except give them a directory. You can use the command line with <code>vim .</code> or
within vim with the commands below. These commands don&rsquo;t even need a space
between it and its arguments, so its very few keystrokes:</p>

<p><code>:e.</code>     - Open the current directory normally<br/>
<code>:sp.</code>    - Open the current directory in a horizontal split<br/>
<code>:vs.</code>    - Open the current directory in a vertical split<br/>
<code>:tabe.</code>  - Open the current directory in a new tab</p>

<p>These will all work, unless you have installed an alternative explorer plugin
(like NERDTree), in which case you can explicitly open netrw with <code>:Ntree</code>.</p>

<p>Netrw also provides a lot of different ways to launch an explorer window. The
most common command is <code>:Explore</code> which will open netrw in the directory of the
currently open file, much like the <code>:NERDTreeFind</code> command. Here are some
variations of that command:</p>

<p><code>:Ex</code>    -  Use current buffer if available, otherwise split horizontally<br/>
<code>:Ex!</code>   -  Use current buffer if available, otherwise split vertically</p>

<p><code>:Sex!</code>  -  Horizontal split<br/>
<code>:Hex</code>   -  Horizontal split<br/>
<code>:Hex!</code>  -  Horizontal split (opposite side)</p>

<p><code>:Sex</code>   -  Vertical split<br/>
<code>:Vex</code>   -  Vertical split<br/>
<code>:Vex!</code>  -  Vertical split (opposite side)</p>

<p><code>:Tex</code>   -  New tab, directory of currently open buffer</p>

<p>There is another variation that doesn&rsquo;t use the directory of currently open
buffer but uses the current working directory. This is one is the most similar
to the default <code>:NERDTree</code> command.</p>

<p><code>:Lex</code>   -  Vertical split full height, current working directory<br/>
<code>:Lex!</code>  -  Vertical split, current working directory (opposite side)</p>

<p>All these commands can also take a directory as an argument.</p>

<h2>Basic Configuration</h2>

<p>I didn&rsquo;t want to customize too much because that would defeat the purpose of the
learning the defaults, but I did want to turn off that banner (it was handy
having the basic operations on display, but I don&rsquo;t think I need it anymore).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:netrw_banner<span class="p">=</span><span class="m">0</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:netrw_list_hide <span class="p">=</span> <span class="s1">&#39;\(^\|\s\s\)\zs\.\S\+,\(^\|\s\s\)ntuser\.\S\+&#39;</span>
</span><span class='line'><span class="k">autocmd</span> <span class="nb">FileType</span> netrw <span class="k">set</span> <span class="nb">nolist</span>
</span></code></pre></td></tr></table></div></figure>


<h2>More Features</h2>

<p>There is more to explore with netrw, such as working with bookmarks and pattern
listings, but this post should have enough of the basics to be productive.
Checkout <code>:help netrw</code> for more features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Author Email Addresses Per Git Repository]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/different-author-email-addresses-per-git-repository/"/>
    <updated>2016-12-28T02:30:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/different-author-email-addresses-per-git-repository</id>
    <content type="html"><![CDATA[<p>Git v2.8 introduced a new configuration option called <code>user.useconfigonly</code>. This
option prevents git from trying to guess your email address to use for the
author metadata for a commit and forces you to have configured one.</p>

<p>This is great news because with a good workflow in place you can be sure you
always have the correct email addresses on your commits.</p>

<h2>Global Configuration</h2>

<p>If <code>user.useconfigonly</code> is set to <code>true</code>, you will need to configure an email
address. The simplest way is with this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name 'Steve Occhipinti'
</span><span class='line'>git config --global user.email steve@example.com</span></code></pre></td></tr></table></div></figure>


<p>Which will result in a configuration like this saved in <code>~/.gitconfig</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[user]
</span><span class='line'>  name = Steve Occhipinti
</span><span class='line'>  email = steve@example.com</span></code></pre></td></tr></table></div></figure>


<p>This is great, but what if you want to work on personal projects and work
projects on the same machine?</p>

<h2>Per Repository Configuration</h2>

<p>Instead of using the global config in the home directory, git will first look
for a local configuration in <code>./.git/config</code>. To set per repository
configuration, all you have to do is <code>cd</code> to the repo and run the same commands
but without the <code>--global</code> flag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config user.name 'Steve Occhipinti'
</span><span class='line'>git config user.email steve@example.com</span></code></pre></td></tr></table></div></figure>


<h2>Mixing Work And Personal</h2>

<p>If you have a global configuration, all repositories will use that as a default
unless you remember to set a per-repository config. If you don&rsquo;t set a global
config, git will normally guess what your email is and use that if its valid.</p>

<p>If you set the <code>useconfigonly</code> option and remove your global config, git will
not allow you to make a commit until you&rsquo;ve setup your user details and this
will prevent accidentally using your work email address on a personal project or
vice-versa.</p>

<p>However, I do leave my name configured globally as that is not going to change
between repositories.</p>

<h2>Visual Queues</h2>

<p>Having that error appear when you haven&rsquo;t setup an email address is great, but
rather than waiting for me to make a mistake, I added an exclamation mark
indicator to my shell prompt to remind me to set up the user details.</p>

<p>The basic idea is something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">local </span>noauthor
</span><span class='line'>git config user.email &gt; /dev/null <span class="o">||</span> <span class="nv">noauthor</span><span class="o">=</span><span class="s2">&quot;!&quot;</span>
</span><span class='line'><span class="nb">export</span> <span class="nv">$PS1</span><span class="o">=</span><span class="s2">&quot;$noauthor${PS1}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Quicker Configuration</h2>

<p>If this is something that I will have to do for every repo I create or clone, I
want to it be pain free. Git makes it really easy to create new sub commands
simply by putting a script named <code>git-xxxx</code> in the path, where <code>xxxx</code> is the
sub command name.</p>

<p>I created a <code>git-author</code> script like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="nv">email_list_file</span><span class="o">=</span><span class="s2">&quot;$HOME/.config/git/author-emails&quot;</span>
</span><span class='line'><span class="nv">has_pecorb</span><span class="o">=</span><span class="k">$(</span><span class="nb">type </span>pecorb &gt; /dev/null 2&gt;<span class="p">&amp;</span>1<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Current author: $(git config user.name) &lt;$(git config user.email)&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="nv">$email_list_file</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">$has_pecorb</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">email</span><span class="o">=</span><span class="k">$(</span>pecorb <span class="nv">$email_list_file</span><span class="k">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">echo</span> -n <span class="s2">&quot;Enter a new email address: &quot;</span>
</span><span class='line'>  <span class="nb">read </span>email
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>git config user.email <span class="nv">$email</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when go to a repo and I see my <code>!</code> indicator, all I have to do is run <code>git
author</code>.</p>

<p>This allows me to put all my email addresses in a file and then select the one I
want from a nice menu. Note, I&rsquo;m using <code>pecorb</code> here which is a
<a href="https://github.com/stevenocchipinti/pecorb">gem I wrote</a> to generate selectable
menus on the command line, but there are plenty of
<a href="https://github.com/stevenocchipinti/pecorb#kudos">alternatives</a> or you could
just use <code>read</code> in <code>bash</code> and type it in (which my script falls back to).</p>

<h2>My Bash Prompt</h2>

<p>The prompt I use may not be the tidiest, but its available
<a href="https://github.com/stevenocchipinti/homesync/blob/1a345e563afb47b81d405d47e4a6b45b63e82c98/data/.bash_git">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Starting Up by Itself at Random Times]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/windows-starting-up-by-itself-at-random-times/"/>
    <updated>2016-12-28T01:53:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/windows-starting-up-by-itself-at-random-times</id>
    <content type="html"><![CDATA[<h2>The Machine</h2>

<p>My gaming computer runs Microsoft Windows 10 and has the following hardware:</p>

<p><strong>Case:</strong> Corsair Carbide Air 240<br/>
<strong>CPU:</strong> Intel Core i5 4690<br/>
<strong>Motherboard:</strong> ASUS Z97M-PLUS<br/>
<strong>RAM:</strong> Corsair Vengence Pro 1600C9R (2x4GB)<br/>
<strong>GPU:</strong> Sapphire R9 280X Dual-X OC 3GB<br/>
<strong>PSU:</strong> Silverstone Strider Gold 750w ST75F-GS<br/>
<strong>SSD:</strong> Corsair Force LS 120GB<br/>
<strong>Cooler:</strong> Corsair H100i<br/>
<strong>Fans:</strong> Corsair AIR SP120 Twin Pack</p>

<h2>The Problem</h2>

<p>Sometimes my computer would turn it self on at some random time. It
wasn&rsquo;t at a particular repeatable time, but just every now and then.</p>

<h2>What I Tried</h2>

<ul>
<li>Disabling the <em>Fast Boot</em> app</li>
<li>Uninstalling the <em>Fast Boot</em> app</li>
<li>Experimenting with various BIOS settings</li>
<li>Disabling <em>boot from network</em> (from BIOS boot priorities)</li>
<li>Power options -> power-plan -> advanced -> PCIe -> link state power management</li>
<li>(&hellip; and a few more that I can&rsquo;t remember)</li>
</ul>


<p>But after all that, it would still turn on every couple of days.</p>

<h2>The Solution</h2>

<p>Eventually I found and disabled <em>Windows Fast Start</em>:</p>

<ul>
<li>Power options -> system (choose buttons) -> fast startup</li>
</ul>


<p>This turned out to be the culprit and now my computer and I can both stop
working through the night!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Author and Email in Every Commit]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/06/01/rewriting-author-and-email-in-every-commit/"/>
    <updated>2015-06-01T00:08:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/06/01/rewriting-author-and-email-in-every-commit</id>
    <content type="html"><![CDATA[<p>Following on from a previous post about <a href="http://blog.stevenocchipinti.com/2015/04/30/rewriting-indentation-in-every-file-and-every-commit/">rewriting indentation for an entire git repo</a>,
another reason to rewrite the history of a whole repo is to change the email
address or name mentioned in commits.</p>

<p>Once again, be aware that rewriting history will cause problems if other people
have clones of the repo so make sure you understand the risks before doing
this!</p>

<p>To change the author name and email address for every commit, you can run this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git filter-branch -f --env-filter <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  GIT_AUTHOR_NAME=&#39;YOUR_NAME&#39;</span>
</span><span class='line'><span class="s2">  GIT_AUTHOR_EMAIL=&#39;YOUR_EMAIL&#39;</span>
</span><span class='line'><span class="s2">  GIT_COMMITTER_NAME=&#39;YOUR_NAME&#39;</span>
</span><span class='line'><span class="s2">  GIT_COMMITTER_EMAIL=&#39;YOUR_EMAIL&#39;</span>
</span><span class='line'><span class="s2">&quot;</span> HEAD
</span></code></pre></td></tr></table></div></figure>


<p>This will blindly replace all the commits with the details given, but if other
people have contributed, you may need to be a bit more careful and only replace
your own:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git filter-branch --commit-filter <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  if [ &quot;</span><span class="nv">$GIT_COMMITTER_NAME</span><span class="s2">&quot; = &#39;YOUR_ORIGINAL_NAME&#39;];</span>
</span><span class='line'><span class="s2">  then</span>
</span><span class='line'><span class="s2">    GIT_AUTHOR_NAME=&#39;YOUR_NEW_NAME&#39;</span>
</span><span class='line'><span class="s2">    GIT_AUTHOR_EMAIL=&#39;YOUR_NEW_EMAIL&#39;</span>
</span><span class='line'><span class="s2">    GIT_COMMITTER_NAME=&#39;YOUR_NEW_NAME&#39;</span>
</span><span class='line'><span class="s2">    GIT_COMMITTER_EMAIL=&#39;YOUR_NEW_EMAIL&#39;</span>
</span><span class='line'><span class="s2">    git commit-tree &quot;</span><span class="nv">$@</span><span class="s2">&quot;;</span>
</span><span class='line'><span class="s2">  else</span>
</span><span class='line'><span class="s2">    git commit-tree &quot;</span><span class="nv">$@</span><span class="s2">&quot;;</span>
</span><span class='line'><span class="s2">  fi</span>
</span><span class='line'><span class="s2">&quot;</span> HEAD
</span></code></pre></td></tr></table></div></figure>


<p>If you understand the risks of rewriting history for a shared repository, you
can force push with the <code>-f</code> flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push -f
</span></code></pre></td></tr></table></div></figure>


<p>Then, to ensure future commits don&rsquo;t use the wrong name and email, you can set
it explicity for this particular repo (instead of globally) with these
commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config user.email <span class="s2">&quot;your_email@example.com&quot;</span>
</span><span class='line'>git config user.email <span class="s2">&quot;your_email@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind this will only work for this particular clone as the details will
be stored locally in <code>.git/config</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Keep Environment Variables When Using Sudo]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/05/26/how-to-keep-environment-variables-when-using-sudo/"/>
    <updated>2015-05-26T13:03:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/05/26/how-to-keep-environment-variables-when-using-sudo</id>
    <content type="html"><![CDATA[<p>By default, the <code>sudo</code> command does not pass your current shell environment to
the new process.</p>

<p>I&rsquo;ve added the function below to my bash configuration which will gives me an
<code>esudo</code> command. This command works much like <code>sudo</code> but it will pass my current
environment to the new process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function</span> esudo <span class="o">{</span> sudo -E bash -c <span class="s2">&quot;$*&quot;</span><span class="p">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you use a ruby version manager, you&rsquo;ll know that they generally rely on
environment variables, so <code>rvm</code> provide the <code>rvmsudo</code> command for this purpose.
I&rsquo;ve since switched to <code>chruby</code> and I couldn&rsquo;t seem to find an equivalent, but
this has solved the issue for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex Lookaround Cheatsheet]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/05/17/regex-lookaround-cheatsheet/"/>
    <updated>2015-05-17T18:16:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/05/17/regex-lookaround-cheatsheet</id>
    <content type="html"><![CDATA[<p>I have a fairly terrible memory but I&rsquo;ve found writing and referring back to
cheatsheets to be a pretty effective way to memorize things.</p>

<p>I ended up referring back to my previous
<a href="http://blog.stevenocchipinti.com/2015/03/24/git-reset-cheatsheet/">cheatsheet on <code>git reset</code></a>
quite a few times soon after I wrote it, so when I came across
<a href="http://idiosyncratic-ruby.com/11-regular-extremism.html">this great post on regex features in ruby</a>
I thought I&rsquo;d share the lookarounds section because I <em>always</em> forget those too!</p>

<table>
<thead>
<tr>
<th> Syntax   </th>
<th> Description         </th>
<th> Example                  </th>
<th> Result </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>(?=X)</code>  </td>
<td> Positive lookahead  </td>
<td> <code>"Ruby"[/.(?=b)/]</code>       </td>
<td> <code>"u"</code>  </td>
</tr>
<tr>
<td> <code>(?!X)</code>  </td>
<td> Negative lookahead  </td>
<td> <code>"Ruby"[/.(?!u)/]</code>       </td>
<td> <code>"u"</code>  </td>
</tr>
<tr>
<td> <code>(?&lt;=X)</code> </td>
<td> Positive lookbehind </td>
<td> <code>"Ruby"[/(?&lt;=u)./]</code>      </td>
<td> <code>"b"</code>  </td>
</tr>
<tr>
<td> <code>(?&lt;!X)</code> </td>
<td> Negative lookbehind </td>
<td> <code>"Ruby"[/(?&lt;!R|^)./]</code>   </td>
<td> <code>"b"</code>  </td>
</tr>
</tbody>
</table>


<p>Checkout the <a href="http://idiosyncratic-ruby.com/11-regular-extremism.html">original blog post</a>
for the rest of the regex tips or the
<a href="http://idiosyncratic-ruby.com">Idiosyncratic Ruby site</a> for more ruby tips!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Indentation in Every File and Every Commit]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/04/30/rewriting-indentation-in-every-file-and-every-commit/"/>
    <updated>2015-04-30T21:51:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/04/30/rewriting-indentation-in-every-file-and-every-commit</id>
    <content type="html"><![CDATA[<p>It seems the JavaScript community is divided into two camps when it comes to
indentation conventions: two spaces or four?</p>

<p>I personally prefer two spaces mainly because its what I&rsquo;m used to in Ruby, I
find it easier on the eyes and just that little bit easier to keep my lines
under 80 characters long (yes, I still think this is good practice).</p>

<p>Our team had come to a general consensus for using two spaces, but when we were
starting a new project based on an existing project that used four spaces, we
thought it would be nice to fix all the whitespace in one go.</p>

<p>In a rush, we made a commit that literally replaced all the whitespace with the
following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -type f -exec sed -i <span class="s2">&quot;&quot;</span> <span class="s2">&quot;s/    /  /g&quot;</span> <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this approach is that it makes going through commit messages
harder. It means that when you use <code>git annotate</code>, every line with indentation
is going to have the whitespace fix as the last commit, so then you would have
to jump back another commit to get the actual commit message for that line,
which can be fairly annoying.</p>

<p>Luckily, if you are forking an existing repository for a new project you have
the luxury of being able to rewrite history without causing any pain to others
as no one else would have checked it out yet.</p>

<p>Git provides a powerful command called <code>filter-branch</code>. It is designed to
rewrite large amounts of history in one go. This can be useful to purge
sensitive information from every commit or update an email address in the
commit data, etc. The only problem with this is, just like rebasing, any
existing checkouts will not be able to simply use <code>git pull</code> cleanly after the
history has been rewritten upstream, but this isn&rsquo;t a problem for new projects.</p>

<p>In order to execute the command above for every commit in our repo, we can make
use of the <code>--tree-filter</code> option like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git filter-branch --tree-filter <span class="s1">&#39;find . -type f -exec sed -i &quot;&quot; &quot;s/    /  /g&quot; {} \;&#39;</span> HEAD
</span></code></pre></td></tr></table></div></figure>


<p>Please note, this can take quite some time, especially for large repositories.
You should also make sure there are no files that specifically need four spaces
(like markdown files, etc.), otherwise you may want to restrict the <code>find</code>
command to only effect files you know are safe to change (<code>*.js</code> for example).</p>

<p>For more information on rewriting history and <code>git filter-branch</code>, see this
<a href="https://git-scm.herokuapp.com/book/en/v2/Git-Tools-Rewriting-History#The-Nuclear-Option:-filter-branch">article</a>
and the
<a href="https://git-scm.herokuapp.com/docs/git-filter-branch">documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Safely Rendering Newlines in HTML With CSS]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/04/25/safely-rendering-newlines-in-html-with-css/"/>
    <updated>2015-04-25T17:39:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/04/25/safely-rendering-newlines-in-html-with-css</id>
    <content type="html"><![CDATA[<p>We all know that if you are going to be rendering user provided content on a
HTML page, it should be sanitized just in case they include a nasty script tag
or something.</p>

<p><a href="https://facebook.github.io/react/">React</a>
will automatically sanitize any string being rendered to the screen unless you
<a href="https://facebook.github.io/react/tips/dangerously-set-inner-html.html">jump through hoops</a>
first - which is great because making this difficult means its somewhat harder
to inadvertently create a
<a href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29">XSS vulnerability</a>.</p>

<p>However, if you get a string from a human source and want to display that in a
<code>div</code> tag while maintaining its newlines, this becomes a little harder because
you don&rsquo;t want to replace all <code>\n</code> characters with <code>&lt;br /&gt;</code> tags because this
would mean you would also need to disable the sanitizing.</p>

<p>There are some libraries to deal with this sort of thing that implement white
listing of tags, etc.<br/>
Another alternative would be using something like
<a href="https://daringfireball.net/projects/markdown/">Markdown</a>.<br/>
Even a simple <code>&lt;pre&gt;</code> tag will get you pretty far, but today I read an article
that shows how you can achieve this with a little CSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.pre</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">white-space</span><span class="o">:</span> <span class="n">pre</span><span class="o">-</span><span class="n">line</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more details, I recommend having a read of
<a href="https://css-tricks.com/almanac/properties/w/whitespace/">this article</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disabling the Same Origin Policy in Chrome]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/04/12/disabling-the-single-origin-policy-in-chrome/"/>
    <updated>2015-04-12T16:20:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/04/12/disabling-the-single-origin-policy-in-chrome</id>
    <content type="html"><![CDATA[<p>If you ever needed to circumvent the browsers
<a href="https://en.wikipedia.org/wiki/Same-origin_policy">Same Origin Policy (SOP)</a>
so you don&rsquo;t need to add
<a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross Origin Resource Sharing (CORS)</a>
headers just to test out an idea, here is a quick little hack to open a new
instance of Chrome that will not enforce these security features:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias unsafe-chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --user-data-dir=~/Library/Application\ Support/Google/UnsafeChrome --disable-web-security 2&gt; /dev/null'</span></code></pre></td></tr></table></div></figure>


<p>The important options here are:</p>

<p><code>--disable-web-security</code> - This will disable the Same Origin Policy<br/>
<code>--user-data-dir=...</code> - This launches a separate instance, with its own user data
directory.<br/>
This prevents you from needing to close any current instances of chrome,
otherwise running this command will just bring the existing instance into focus.</p>

<p>Another good thing about giving this instance its own <code>user-data-dir</code> is that
you can give this instance its own settings. For example, this instance is not
signed into my Google account and I&rsquo;ve configured a bright red theme so I can
easily tell the difference between my normal Chrome and my insecure Chrome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring a HDMI-CEC Remote in Kodi]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/04/04/configuring-a-hdmi-cec-remote-in-kodi/"/>
    <updated>2015-04-04T21:39:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/04/04/configuring-a-hdmi-cec-remote-in-kodi</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Raspbmc for a while now, but I only just saw that it has been
superseded by <a href="https://osmc.tv/">OSMC</a> (and XBMC is now called <a href="http://kodi.tv/">Kodi</a>,
so with the long weekend I thought I&rsquo;d upgrade.</p>

<p>The upgrade process is really simple. I backed up my existing installtion of
Raspbmc, downloaded the offical <a href="https://osmc.tv/download/">OSMC installer</a>
from their site, installed it over the top and booted it up.</p>

<p>From here, there are only a few things to do. I entered my <a href="https://osmc.tv/help/wiki/pi-buycodec">MPG2 and WVC1 codecs</a>,
setup my video sources and kicked off the scrapers and installed a few addons.
The only other thing is setting up my TV remote.
(I did this last time but forgot how, so this time I thought I&rsquo;d blog it!)</p>

<p>Out of the box, my Samsung <em>&ldquo;Smart Touch&rdquo;</em> Remote (<a href="http://reviews.lcdtvbuyingguide.com/samsung-lcd-tv/pictures/samsung-f6400-remote.jpg">this one</a>
if you&rsquo;re wondering) mostly just works, the only problem is the back button
opens the context menu instead of going back!</p>

<p>To fix this, the first step is to find out what each button on the remote maps
to in Kodi. Thanks to this great <a href="http://forum.kodi.tv/showthread.php?tid=139145&amp;pid=1285390#pid1285390">forum post</a>
by a user called &ldquo;Knapster&rdquo; this is really easy.</p>

<p>Just SSH to the pi, create a new file <code>~/.kodi/userdata/keymaps/remote.xml</code> and
paste <a href="https://gist.github.com/stevenocchipinti/42f2eca2a9f04ed9e52f">this contents</a>
in it. Now reboot Kodi and everytime you press a button, you&rsquo;ll get a
notification on the screen of what command it is sending.</p>

<p>A quick way of doing that from an SSH session is like this:<br/>
(The default username and password are both <code>osmc</code>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh osmc@&lt;kodi-ip-address&gt;
</span><span class='line'>curl https://gist.githubusercontent.com/stevenocchipinti/42f2eca2a9f04ed9e52f/raw/remote.xml &gt; ~/.kodi/userdata/keymaps/remote.xml
</span><span class='line'>sudo reboot</span></code></pre></td></tr></table></div></figure>


<p>In my case, everything seemed to make sense except the back button, which was
actually sending <code>title</code> instead of <code>back</code>. As I don&rsquo;t have a <em>title</em> button,
I&rsquo;m going to reassign that to be a back button instead.</p>

<p>First, lets replace our <code>remote.xml</code> with the default configuration, you can get
these mappings from the installed Kodi files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /usr/share/kodi/system/keymaps/remote.xml ~/.kodi/userdata/keymaps/remote.xml</span></code></pre></td></tr></table></div></figure>


<p>This file has what every command does in every context and makes it easy to
modify. Here is a diff of the changes I made for my remote:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>58c58
</span><span class='line'>&lt;       &lt;title&gt;ContextMenu&lt;/title&gt;
</span><span class='line'>---
</span><span class='line'>&gt;       &lt;title&gt;Back&lt;/title&gt;
</span><span class='line'>74c74
</span><span class='line'>&lt;       &lt;guide&gt;ActivateWindow(TVGuide)&lt;/guide&gt;
</span><span class='line'>---
</span><span class='line'>&gt;       &lt;guide&gt;ActivateWindow(Home)&lt;/guide&gt;
</span><span class='line'>79c79
</span><span class='line'>&lt;       &lt;red&gt;ActivateWindow(TVChannels)&lt;/red&gt;
</span><span class='line'>---
</span><span class='line'>&gt;       &lt;red&gt;ContextMenu&lt;/red&gt;</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve made the <em>&ldquo;title&rdquo;</em> button send the <code>back</code> command and because I don&rsquo;t have
a TV tuner connected, I&rsquo;ve also re-assigned the <em>&ldquo;TV Guide&rdquo;</em> button to go to the
home screen and the <em>&ldquo;Red&rdquo;</em> button to be the context menu button.<br/>
Interestingly, the channel up and down buttons on my remote we already assigned
to page up and page down, which suits me great while I don&rsquo;t have a TV Tuner.</p>

<p>After rebooting, I now have a functional remote control!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Reset Cheatsheet]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/03/24/git-reset-cheatsheet/"/>
    <updated>2015-03-24T11:13:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/03/24/git-reset-cheatsheet</id>
    <content type="html"><![CDATA[<p>The <code>reset</code> command in git does quite a lot, but I always forget all its uses.<br/>
This is a cheatsheet based on <a href="http://git-scm.com/blog/2011/07/11/reset.html">this blog</a>.</p>

<p>The <code>reset</code> command will:<br/>
1. Move whatever branch <code>HEAD</code> points to <em>(stop here unless <code>--soft</code>)</em><br/>
2. THEN, make the Index look like that <em>(stop here unless <code>--hard</code>)</em><br/>
3. THEN, make the Working Directory look like that</p>

<h2>Commit level</h2>

<table>
<thead>
<tr>
<th>                            </th>
<th> Updates Current Branch? </th>
<th> Updates Index? </th>
<th> Updates Working Dir? </th>
<th> Working Dir Safe?                               </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>reset --soft [commit]</code>    </td>
<td> YES                     </td>
<td> NO             </td>
<td> NO                   </td>
<td> YES                                             </td>
</tr>
<tr>
<td> <code>reset (--mixed) [commit]</code> </td>
<td> YES                     </td>
<td> YES            </td>
<td> NO                   </td>
<td> YES                                             </td>
</tr>
<tr>
<td> <code>reset --hard [commit]</code>    </td>
<td> YES                     </td>
<td> YES            </td>
<td> YES                  </td>
<td> <span style="color: rgb(255, 38, 0);">NO</span> </td>
</tr>
<tr>
<td> <code>checkout [commit]</code>        </td>
<td> NO                      </td>
<td> YES            </td>
<td> YES                  </td>
<td> YES                                             </td>
</tr>
</tbody>
</table>


<p><strong>reset &#45;&#45;soft [commit]</strong><br/>
When given <code>HEAD~</code>, this undos the git commit<br/>
Will move the current branch back to the given commit, but not update the index or working directory<br/>
This provides similar functionality as <code>git checkout --amend</code> (but changing the whole commit, not just the message)</p>

<p><strong>reset (&#45;&#45;mixed) [commit] <span style="color: rgb(160, 160, 160); font-weight: normal;">(default form)</span></strong><br/>
When given <code>HEAD~</code>, this undos the <code>git commit</code> and the <code>git add</code><br/>
Will move the current branch and update the index, but working directory will remain untouched</p>

<p><strong>reset &#45;&#45;hard [commit] <span style="color: rgb(255, 38, 0);">(unsafe)</span></strong><br/>
When given <code>HEAD~</code>, this undos the <code>git commit</code>, <code>git add</code> and also the changes in the working directory<br/>
Will update all three trees to match the given commit<br/>
This is useful to remove commits you don’t want<br/>
From a clean working tree, it is also useful to undo a conflicted (or not conflicted) <code>git merge</code> or a <code>git pull</code><br/>
From a dirty working tree, use <code>--merge</code> instead, this will safely preserve your local changes<br/>
The <code>--keep</code> option is useful when removing some of the last commits while safely keeping your local changes</p>

<p><strong>checkout [commit]</strong><br/>
When given <code>HEAD~</code>, this will safely update the working directory and the index without moving the current branch<br/>
This will leave you in a <em>detached HEAD</em> state</p>

<h2>File level</h2>

<table>
<thead>
<tr>
<th>                            </th>
<th> Updates Current Branch? </th>
<th> Updates Index? </th>
<th> Updates Working Dir? </th>
<th> Working Dir safe?                               </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>reset (commit) [file]</code>    </td>
<td> NO                      </td>
<td> YES            </td>
<td> NO                   </td>
<td> YES                                             </td>
</tr>
<tr>
<td> <code>checkout (commit) [file]</code> </td>
<td> NO                      </td>
<td> NO             </td>
<td> YES                  </td>
<td> <span style="color: rgb(255, 38, 0);">NO</span> </td>
</tr>
</tbody>
</table>


<p><strong>reset (commit) [file]</strong><br/>
When given a file path, the first step of updating the branch that <code>HEAD</code> points to is skipped<br/>
Will update the index only to match commit, leaving both working directory and current branch untouched<br/>
From here, you could use <code>git checkout</code> to make the working directory match the index, although <code>git checkout</code> can do that with one command (see below)<br/>
The commit parameter will default to <code>HEAD</code> which effectively <em>un-stages</em> files</p>

<p><strong>checkout (commit) [file] <span style="color: rgb(255, 38, 0);">(unsafe)</span></strong><br/>
Updates the working directory only, without changing the index, current branch or even what <code>HEAD</code> is pointing to<br/>
This would effectively be <code>git reset --hard [branch] file</code>, but this command does not exist</p>

<p>More info and examples in <code>git reset --help</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Email From the Command Line]]></title>
    <link href="http://blog.stevenocchipinti.com/2014/12/29/sending-email-from-the-command-line/"/>
    <updated>2014-12-29T12:50:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2014/12/29/sending-email-from-the-command-line</id>
    <content type="html"><![CDATA[<p>It&rsquo;s so easy to write little scripts and execute them at a later time with
the standard command-line tooling available in unix-like operating systems, but
if you plan on having them execute while you are out and about, it would be nice
to get a notification on your phone that it worked (or didn&rsquo;t work).</p>

<p>If you&rsquo;re happy with a simple email notification, then luckily this can be done
with one simple line of code!</p>

<p>On a mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello&quot;</span> | mail -s <span class="s2">&quot;Your alert&quot;</span> to-addr@example.com -f from-addr@example.com
</span></code></pre></td></tr></table></div></figure>


<p>On *nix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Hello&quot;</span> | mail -s <span class="s2">&quot;Your alert&quot;</span> to-addr@example.com -aFrom:from-addr@example.com
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Vim for IDE Users]]></title>
    <link href="http://blog.stevenocchipinti.com/2014/03/17/introduction-to-vim-for-ide-users/"/>
    <updated>2014-03-17T17:23:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2014/03/17/introduction-to-vim-for-ide-users</id>
    <content type="html"><![CDATA[<blockquote><p>I&rsquo;d love to learn Street Fighter 2, but there are just so many combos! <br/>
- <a href="http://robots.thoughtbot.com/the-vim-learning-curve-is-a-myth">The Vim Learning Curve is a Myth</a>, Thoughtbot</p></blockquote>

<p>A lot of people are scared of learning of vim because of the initial learning curve.</p>

<p>When learning vim for the first time there are lots of approaches, but two common ways are:</p>

<ol>
<li>Learn &ldquo;pure&rdquo; vi/vim, then introduce vimrc options and then plugins</li>
<li>Start with an existing &ldquo;customization&rdquo; (from someone else), then learn what things do</li>
</ol>


<p>Once upon a time, I would have suggested learning the basic features of vim before getting into customization, but there are quite a lot of people who are not interested in learning the tool unless they can be productive straight away.<br/>
When coming from an IDE, the apparent shortcomings of a less integrated text editor will scare them away before they have discovered the power of editing text with vim.</p>

<p>This guide is aimed at those people. I want to outline some steps to learn vim that makes the transition from IDE to vim as easy as possible with the hope of making vim a less scary step.</p>

<h2>Installing Vim</h2>

<p>Most systems will come with a version of vim, but you may want to get the latest version from the systems package manager for a more complete feature set.</p>

<p>On a mac, the standard install of <code>vim</code> is missing clipboard support so I would recommend installing MacVim, here is how I do it with homebrew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install macvim
</span><span class='line'>brew linkapps</span></code></pre></td></tr></table></div></figure>


<p>This package provides <code>mvim</code> on the command line, but <code>vim</code> will still refer to the system version, so I setup a couple of aliases in my <code>.bash_profile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias vim="mvim -v"
</span><span class='line'>alias vi="vim"</span></code></pre></td></tr></table></div></figure>


<h2>Basic Usage</h2>

<p>This guide is more about setting up vim in a manner that won&rsquo;t seem too crippling when coming from an IDE, so I won&rsquo;t focus too much on editing effectively with vim here.</p>

<p>If vim is completely new to you and you don&rsquo;t know the basics such as the difference between <em>command mode</em> and <em>insert mode</em> or how to quit vim, I would recommend pausing the guide here and running <code>vimtutor</code> in your terminal to learn the basics.</p>

<h2>Configuring Vim</h2>

<p>Vim uses a <code>.vimrc</code> configuration file in your home directory. There is a plethora of configuration options you can put here, but I thought I would offer some basic options to get you started.</p>

<p>My <a href="https://github.com/stevenocchipinti/dotvim/blob/master/vimrc"><code>.vimrc</code></a> is quite large, but here is a snippet for some basic options that you can put into your own <code>.vimrc</code> to get started:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filetype plugin indent on
</span><span class='line'>syntax on
</span><span class='line'>
</span><span class='line'>set ts=2 sw=2         " Use 2 spaces for tabs
</span><span class='line'>set expandtab         " Use spaces instead of tab characters
</span><span class='line'>set wrap              " Wrap the display lines (not actual text)
</span><span class='line'>set linebreak
</span><span class='line'>set backspace=indent,eol,start
</span><span class='line'>set incsearch         " Show matching search results as typing
</span><span class='line'>set ruler             " Show row and column in status bar
</span><span class='line'>set wildmenu          " Nicer tab completion for :ex commands
</span><span class='line'>set ignorecase        " Case insensitive search by default
</span><span class='line'>set smartcase         " Use case sensitive search in a capital letter is used
</span><span class='line'>set warn              " Show what mode your in (insert, etc.)
</span><span class='line'>set scrolloff=3       " Number of lines to always show at at the top and bottom
</span><span class='line'>set autoindent        " Copy the indentation from the previous line
</span><span class='line'>set colorcolumn=81    " Highlight the 81st column (shorthand = :set cc=81)
</span><span class='line'>set cursorline        " Highlight the line which the cursor is on
</span><span class='line'>set laststatus=2      " Always show a status bar
</span><span class='line'>set mouse=a           " Make the mouse work - even in terminals
</span><span class='line'>set list              " Show `listchars` characters
</span><span class='line'>set listchars=tab:=»,trail:·
</span><span class='line'>
</span><span class='line'>" Easier way to copy and paste from the global clipboard
</span><span class='line'>map &lt;leader&gt;p "+p
</span><span class='line'>map &lt;leader&gt;y "+y</span></code></pre></td></tr></table></div></figure>


<h2>Navigating code</h2>

<p>Vim has builtin support for <code>ctags</code>, which indexes your code and allows you to jump to the definition of a method or class. As usual, on a mac you will have a standard version of <code>ctags</code> installed, but it&rsquo;s not very good, so I recommend installing the <em>exuberant ctags</em> package from homebrew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ctags
</span><span class='line'>sudo mv /usr/bin/ctags{,-bsd}
</span><span class='line'>sudo ln -s /usr/local/Cellar/ctags/5.8/bin/ctags /usr/bin/ctags</span></code></pre></td></tr></table></div></figure>


<p>To make use of ctags, in the root of a project run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags -R .</span></code></pre></td></tr></table></div></figure>


<p>This will need to be run when the code changes to keep the tags file up to date, so I have setup <a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">git hooks</a> to automate this. If you don&rsquo;t want to setup git hooks, you can execute this command from within vim with <code>:!ctags -R .</code></p>

<p>Now if you open some code, move your cursor over an occurrence of a method or class, you can jump into the definition of that method or class with the following key bindings:</p>

<p><code>crtl</code> + <code>]</code> = Jump to definition (of what is under the cursor)<br/>
<code>crtl</code> + <code>T</code> = Jump back from following a tag</p>

<p>The following key bindings are also useful for navigation and do <em>not</em> require ctags:</p>

<p><code>/foo</code> = Search for <code>foo</code><br/>
<code>*</code> = Search for the word under the cursor<br/>
<code>n</code> = Jump to the next occurrence of the search<br/>
<code>N</code> = Jump to the previous occurrence of the search<br/>
<code>crtl</code> + <code>o</code> = Go back from the last jump<br/>
<code>crtl</code> + <code>i</code> = Go forward to the recent jump</p>

<h2>Vim Plugins</h2>

<p>Vim has a plugin system, but by default it does not do a good job of keeping plugins isolated from each other. To improve this, there are plugins that manage plugins.<br/>
I recommend using <a href="https://github.com/gmarik/vundle">Vundle</a>, here is how to set it up along with a few useful vim plugins:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</span></code></pre></td></tr></table></div></figure>


<p>Then place the following at the top of your <code>.vimrc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filetype off
</span><span class='line'>set rtp+=~/.vim/bundle/vundle/
</span><span class='line'>call vundle#rc()
</span><span class='line'>
</span><span class='line'>Plugin 'gmarik/vundle'
</span><span class='line'>Plugin 'kien/ctrlp.vim'
</span><span class='line'>Plugin 'scrooloose/nerdtree'
</span><span class='line'>Plugin 'tpope/vim-rails'
</span><span class='line'>Plugin 'tpope/vim-rake'
</span><span class='line'>Plugin 'tpope/vim-fugitive'
</span><span class='line'>Plugin 'tpope/vim-commentary'
</span><span class='line'>Plugin 'tpope/vim-repeat'
</span><span class='line'>Plugin 'tpope/vim-surround'
</span><span class='line'>Plugin 'vim-scripts/matchit.zip'
</span><span class='line'>Plugin 'scrooloose/syntastic'
</span><span class='line'>Plugin 'bogado/file-line'
</span><span class='line'>
</span><span class='line'>call vundle#end()
</span><span class='line'>filetype plugin indent on</span></code></pre></td></tr></table></div></figure>


<p>Then, I choose configure some of those plugins towards the bottom of the <code>.vimrc</code> like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" NERDTREE PLUGIN - (mnemonic: Files)
</span><span class='line'>nmap &lt;leader&gt;f :NERDTreeToggle&lt;CR&gt;
</span><span class='line'>nmap &lt;leader&gt;F :NERDTreeFind&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>" CTRL-P PLUGIN
</span><span class='line'>let g:ctrlp_user_command = {
</span><span class='line'>\   'types': {
</span><span class='line'>\     1: ['.git/', 'cd %s && git ls-files'],
</span><span class='line'>\     2: ['.hg/', 'hg --cwd %s locate -I .'],
</span><span class='line'>\   },
</span><span class='line'>\   'fallback': 'find %s -type f'
</span><span class='line'>\ }</span></code></pre></td></tr></table></div></figure>


<p>Now, from within vim, run <code>:BundleInstall</code></p>

<h2>Next steps</h2>

<p>At this point, you should have a somewhat powerful installation of vim, the next step is to learn how to use this power. Below are some resources to help you learn how to use vim effectively.</p>

<ul>
<li>run <code>vimtutor</code> on the command line to learn</li>
<li><a href="http://vimcasts.org/">vimcasts</a></li>
<li><a href="http://www.vimgolf.com/">vimgolf</a></li>
<li><a href="http://github.com/stevenocchipinti/dotvim">my .vimrc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Completely Removing a Git Commit Due to Sensitive Information]]></title>
    <link href="http://blog.stevenocchipinti.com/2014/03/10/completely-removing-a-git-commit-due-to-sensitive-information/"/>
    <updated>2014-03-10T15:07:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2014/03/10/completely-removing-a-git-commit-due-to-sensitive-information</id>
    <content type="html"><![CDATA[<p>I recently made a big mistake and checked in some sensitive information into a
public GitHub repository.</p>

<p>The first reaction is to remove that sensitive information. While that is a good
first step, making a new commit to remove the information means that when anyone
looks at the commit history, the sensitive information will still be visible.</p>

<h2>Re-writing history</h2>

<p>The next step is to re-write the git history.<br/>
This can be done a few ways, but I took a simple approach and sqaushed the
commits down such that the addition and removal of the sensitive information
cancel each other out and the new commit doesn&rsquo;t contain any sensitive
information.</p>

<p>To demonstrate, here is the history of a git respository where some sensitive
information was commited in <code>bbd80c4</code> and then removed in <code>a120437</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --oneline
</span><span class='line'>a120437 Ooops... remove sensitive data!
</span><span class='line'>bbd80c4 Add some more data
</span><span class='line'>0115d7b Add some data
</span><span class='line'>20133f4 Initial commit
</span><span class='line'>
</span><span class='line'>$&gt; git show bbd80c4
</span><span class='line'>diff --git a/data b/data
</span><span class='line'>index f8327c3..afbbccd 100644
</span><span class='line'>--- a/data
</span><span class='line'>+++ b/data
</span><span class='line'>@@ -1 +1,3 @@
</span><span class='line'> KEY=value
</span><span class='line'>+MORE=data
</span><span class='line'>+PASSWORD=secret
</span><span class='line'>
</span><span class='line'>$&gt; git show a120437
</span><span class='line'>diff --git a/data b/data
</span><span class='line'>index afbbccd..1f0aa11 100644
</span><span class='line'>--- a/data
</span><span class='line'>+++ b/data
</span><span class='line'>@@ -1,3 +1,2 @@
</span><span class='line'> KEY=value
</span><span class='line'> MORE=data
</span><span class='line'>-PASSWORD=secret
</span></code></pre></td></tr></table></div></figure>


<p>From here, I used git&rsquo;s interactive rebase feature to modify the relevant
commits. In this case, I chose the commit just before the sensitive data was
added, like this: <code>git rebase -i 0115d7b</code></p>

<p>In the interactive editor, I did the following and then provided a new commit
message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pick a120437 Ooops... remove sensitive data!
</span><span class='line'>squash bbd80c4 Add some more data</span></code></pre></td></tr></table></div></figure>


<p>This resulted in the last 2 commits being merged into a new one.<br/>
Here is the history:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --oneline
</span><span class='line'>fd04bfc Add some more data
</span><span class='line'>0115d7b Add some data
</span><span class='line'>20133f4 Initial commit
</span><span class='line'>
</span><span class='line'>$&gt; git show fd04bfc
</span><span class='line'>diff --git a/data b/data
</span><span class='line'>index f8327c3..1f0aa11 100644
</span><span class='line'>--- a/data
</span><span class='line'>+++ b/data
</span><span class='line'>@@ -1 +1,2 @@
</span><span class='line'> KEY=value
</span><span class='line'>+MORE=data</span></code></pre></td></tr></table></div></figure>


<p>Rewriting commits that have already been pushed to a remote means a couple of
things.<br/>
For one, when you push this new history to the remote, you may require
the <code>--force</code> option to disregard the existing history.<br/>
Also, anyone who has an existing clone of the repository will have issues when
they pull down the latest changes but in the case of sensitive information, this
is a necessary side-effect.</p>

<h2>Cleaning up the cached commits</h2>

<p>We&rsquo;re not done yet!<br/>
Git keeps track of all changes made to a repository, even though the history
does not show the <em>bad</em> commits, they are still there! You can view all changes
to the repository using <code>git reflog</code>. From this command you can find the SHA of
the <em>bad</em> commit and then use <code>git show</code> to see the sensitive information.</p>

<p>This means that GitHub also still has the <em>bad</em> commits and if you know the SHA
you will be able to find that sensitive information again.
To fix this we should clear the local cache and GitHub&rsquo;s cache.</p>

<p>You can clear the your local reflog by issuing these commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf .git/refs/original/
</span><span class='line'>git reflog expire --expire=now --all
</span><span class='line'>git gc --prune=now
</span><span class='line'>git gc --aggressive --prune=now</span></code></pre></td></tr></table></div></figure>


<p>GitHub doesn&rsquo;t give us a way to clear a repositorys cache, but due to the
nature of git, simply deleting the repository and pushing a new copy of your
local repository to GitHub will effectively destroy that cache.</p>

<p>GitHub also have an article on how to <a href="https://help.github.com/articles/remove-sensitive-data">remove sensitive data</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing for TrailWalker]]></title>
    <link href="http://blog.stevenocchipinti.com/2013/12/14/preparing-for-trailwalker/"/>
    <updated>2013-12-14T22:49:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2013/12/14/preparing-for-trailwalker</id>
    <content type="html"><![CDATA[<p>Back in 2011, I attempted <a href="trailwalker.oxfam.org.au">The Oxfam TrailWalker</a>.<br/>
I didn&rsquo;t finish the full 100km - due to injuries I had to stop at about 60km,
but it was quite an experience none the less.</p>

<p>Recently a friend asked me what I did to prepare for TrailWalker, so here is a
quick post to explain some key points that helped me.</p>

<h2>1. Do as much training as possible!</h2>

<p>Expect to spend many months of weekends leading up to the event for training.<br/>
Start small (short, flat walks. Yarra trail, etc.) and work your way up to the
harder ones (hill climbs, longer distances, etc.)<br/>
Try to go every weekend, the more you do, the more your body will become
conditioned for hiking.<br/>
Go rain, hail, shine, day, night, etc. It&rsquo;ll help you realize what you need
(food, water-proof shoes/pants, stronger torch, etc.).<br/>
Try to fit in at least one night hike and one long hike well before the event
to see how you cope.<br/>
You could pick a different segment of the actual track every weekend so you get
an idea of what the event will be like.</p>

<h2>2. Find your weak points</h2>

<p>My first training hike, I got blisters.<br/>
For me, I had to use better socks (didn&rsquo;t think it would actually help, but it
made a huge difference!).<br/>
I also spoke to professionals and learned how to strap my feet properly and
ensured my laces were done up tight enough.<br/>
All this with shoes that actually fit my feet properly meant I never got
blisters again.<br/>
I&rsquo;m glad too, in the medical tents, there were people with epic blisters!
&hellip;Scary stuff!</p>

<h2>3. Hydration</h2>

<p>It&rsquo;s worth reading up on how to hydrate properly. My memory is a little
sketchy, but you have to pace yourself with water.<br/>
Too much and you flush your body of minerals, feel bloated, etc.<br/>
Not enough and you are more likely to suffer from exhaustion.<br/>
Sip instead of gulp.<br/>
You may want to supplement with electrolytes. This is also available in a
powder that you can mix into your water.</p>

<h2>4. Food</h2>

<p>Something worth reading up on too.<br/>
I found having frequent small meals with a mix of high-GI and low-GI
ingredients worked the best.<br/>
For example, a single snack would be a slice of multi-grain bread (low-GI) with
jam (high-GI), folded in half and individually wrapped.<br/>
This made it easy to pull one out of a bad on the go. Sugary muesli bars also
work pretty well.<br/>
Make sure you drink water whenever you eat too, it&rsquo;ll help with digestion and
keep you from feeling too hungry.</p>

<h2>5. Shoes</h2>

<p>Like I said earlier, get shoes that fit your feet properly - Movement and
rubbing will get pretty bad as you work towards 100km!<br/>
Don&rsquo;t buy new shoes just before they event, they need time to be broken in. If
you want to buy new shoes, allow at least 3 or 4 training hikes in them first
(preferably the smaller training hikes).</p>

<h2>6. Sleeping</h2>

<p>We decided against sleeping, we thought it would be harder to get going again
afterwards.<br/>
In hindsight I think a couple of powernaps would have helped a fair bit.<br/>
If you do decide to sleep, I would probably recommend getting your support crew
to bring blankets and also wake you up before you sleep for too long.</p>

<h2>7. Team dynamics</h2>

<p>Teams can get on each others nerves after spending so long with each other,
especially when your extremely exhausted.<br/>
Patience is key, but also sticking together is very important.<br/>
Sometimes, some team members will want to go faster than others, this can cause
issues and may result in the team splitting up during the event - this is not
ideal and should be avoided.<br/>
Make sure your team has the same goal for the event (i.e. &ldquo;just finishing&rdquo; or
&ldquo;getting a good time&rdquo;).<br/>
One strategy is to let the slowest in the team lead the way.</p>

<h2>Conclusion</h2>

<p>TrailWalker was a great experience (other than the injuries I incurred).<br/>
You have to work quite hard (especially if you&rsquo;ve never done hiking before, like
myself) but it all adds to a fantastic sense of accomplishment at the end -
even if you don&rsquo;t finish.<br/>
I learned a lot by doing this and even though training every weekend was tiring,
it was actually a lot of fun.<br/>
It was definitely a step out of my comfort zone, but I would recommend others
to give it a go - and it&rsquo;s for a great cause!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Minecraft in Linux]]></title>
    <link href="http://blog.stevenocchipinti.com/2013/11/10/installing-minecraft-in-linux/"/>
    <updated>2013-11-10T12:26:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2013/11/10/installing-minecraft-in-linux</id>
    <content type="html"><![CDATA[<h2>1. Download Oracle Java</h2>

<p>First you will need the official Oracle version of Java (the open source
alternatives will probably not work as well for Minecraft). I think you can
just download the runtime, but I personally opt for installing the complete
Java Development Kit (JDK).</p>

<p>You can download the <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">official JDK here</a>.<br/>
If you run a RedHat based distro, there is a <code>.rpm</code>, otherwise just get the
<code>.tgz</code> for your system.</p>

<h2>2. Installing Oracle Java</h2>

<p>At the time of writing, the version of java is 7u45.<br/>
I move this <code>.tar.gz</code> file from my downloads folder to <code>/opt</code> and unzip it
there, like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv ~/Downloads/jdk-7u45-linux-x64.tar.gz /opt
</span><span class='line'>cd /opt
</span><span class='line'>tar xzvf jdk-7u45-linux-x64.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>This will create a new directory called <code>jdk1.7.0_45</code>.<br/>
As there is a good chance we will be updating java in the future, I create a
symlink that we can easily change to the new versions in the future like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s jdk1.7.0_45 jdk</span></code></pre></td></tr></table></div></figure>


<p>Now when ever you want to find java, it will be in <code>/opt/jdk</code>.</p>

<p>All we have to do now is make the executables available on the <code>PATH</code>.<br/>
Edit your <code>.bashrc</code> (or <code>.profile</code>, etc.) and add this line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=$PATH:/opt/jdk/bin/</span></code></pre></td></tr></table></div></figure>


<h2>3. Install Minecraft</h2>

<p>Get Minecraft from the <a href="https://minecraft.net/download">official Minecraft download page</a>.
Under the &ldquo;Minecraft for Linux / Other&rdquo; there is a link to download the
official Minecraft <code>.jar</code> file.  I also put this in <code>/opt</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /opt/minecraft
</span><span class='line'>mv ~/Downloads/Minecraft.jar /opt/minecraft</span></code></pre></td></tr></table></div></figure>


<p>At this point we can start Minecraft with this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar Minecraft.jar</span></code></pre></td></tr></table></div></figure>


<h2>4. Setting up an Application Launcher for Gnome</h2>

<p>I use Gnome Shell and if I&rsquo;m not in a terminal, I normally use Gnome&rsquo;s
<em>Activities Overview</em> to launch apps by pressing the &lsquo;super&rsquo; key, typing
&ldquo;Minecraft&rdquo; and pressing &lsquo;enter&rsquo;.</p>

<p>We want Minecraft to be installed just like any other app, so we will need to
add a launcher for Minecraft, but before we do that, we need an icon for it.
I just found one online, so lets download it to our <code>/opt/minecraft</code> directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/minecraft
</span><span class='line'>wget http://images.wikia.com/yogbox/images/d/dd/Minecraft_Block.svg</span></code></pre></td></tr></table></div></figure>


<p>Then to make an application launcher, you can use this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gnome-desktop-item-edit --create-new ~/.local/share/applications</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://lh5.googleusercontent.com/-9VnJ9K_nqQo/Un72Np6LzPI/AAAAAAAABTg/PVig82azah8/w435-h224-no"></p>

<p>You can assign it the logo we downloaded earlier and use this for the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/jdk/bin/java -jar /opt/minecraft/Minecraft.jar</span></code></pre></td></tr></table></div></figure>


<h2>5. Have fun!</h2>

<p>Now you can launch Minecraft just like the other apps in Gnome Shell!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Task With an Arbitrary Number of Arguments]]></title>
    <link href="http://blog.stevenocchipinti.com/2013/10/18/rake-task-with-an-arbitrary-number-of-arguments/"/>
    <updated>2013-10-18T14:10:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2013/10/18/rake-task-with-an-arbitrary-number-of-arguments</id>
    <content type="html"><![CDATA[<p>Rake gives you a way of specifying arguments for a given task like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;A task that can accept a optional &#39;foo&#39; argument&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:thing</span><span class="p">,</span> <span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">args</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will make the value of <code>foo</code> available in the <code>args</code> variable.
When you run <code>rake -T</code>, it will show you that argument like this:</p>

<pre><code>$&gt; rake -T
rake thing[foo]  # A task that can accept a optional 'foo' argument
</code></pre>

<p>But what if you want to allow an arbitrary number of arguments, like a list of
usernames to report on?</p>

<h2>A solution</h2>

<p>You could use an alternative method of passing arguments in, such as <code>ARGV</code> or
Environment Variables, but Rake does provide a way.
The <code>args</code> block parameter behaves like a hash, but it is actually a
<code>Rake::TaskArguments</code> object. This object responds to an <code>#extras</code> method that
will return an array of any extra arguments.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:thing</span><span class="p">,</span> <span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">args</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>     <span class="c1"># First argument</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">args</span><span class="o">.</span><span class="n">extras</span>    <span class="c1"># The rest of the arguments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow you to call the task like this:</p>

<pre><code>$&gt; rake thing[foo]
foo

$&gt; rake thing[foo,extra1,extra2]
foo
extra1
extra2
</code></pre>

<h2>Caveats</h2>

<p>While you can specify many arguments on the command line, (unless they are
quoted) the arguments can not be separated by spaces, for example:</p>

<pre><code>$&gt; rake thing[foo,extra1]    # GOOD
foo
extra1
$&gt; rake thing[foo, extra1]   # BAD
Don't know how to build task 'thing[foo,'
</code></pre>

<p>This means you may want to include some explanation in the <code>desc</code> section.</p>

<p>Also, <code>rake -T</code> will not show the &ldquo;extra&rdquo; arguments, only the named arguments:</p>

<pre><code>$&gt; rake -T
rake thing[foo]  # A task that can accept a optional 'foo' argument
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default Values for Environment Variables]]></title>
    <link href="http://blog.stevenocchipinti.com/2013/07/22/default-values-for-environment-variables/"/>
    <updated>2013-07-22T22:51:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2013/07/22/default-values-for-environment-variables</id>
    <content type="html"><![CDATA[<p>In ruby, the <code>||=</code> operator will assign a given value to a variable, if that
variable does not already have a value.
For example:</p>

<figure class='code'><figcaption><span>default_value.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">foo</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">foo</span> <span class="o">||=</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">foo</span>  <span class="c1"># =&gt; &quot;bar&quot;</span>
</span><span class='line'><span class="n">foo</span> <span class="o">||=</span> <span class="s2">&quot;baz&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">foo</span>  <span class="c1"># =&gt; &quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will assign <code>"bar"</code> to <code>foo</code>, unless <code>foo</code> is already set.
In other words, it will make <code>"bar"</code> the <em>default value</em> of <code>foo</code>.</p>

<p>I recently had to do this is bash, and it turns out bash has similar
functionality. This is the bash equivalent:</p>

<figure class='code'><figcaption><span>default_value.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="nv">$FOO</span>  <span class="c"># =&gt; &quot;&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">FOO</span><span class="o">=</span><span class="k">${</span><span class="nv">FOO</span><span class="k">:-</span><span class="s2">&quot;bar&quot;</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$FOO</span>  <span class="c"># =&gt; &quot;bar&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">FOO</span><span class="o">=</span><span class="k">${</span><span class="nv">FOO</span><span class="k">:-</span><span class="s2">&quot;baz&quot;</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$FOO</span>  <span class="c"># =&gt; &quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing Over Previously Printed Characters and Lines]]></title>
    <link href="http://blog.stevenocchipinti.com/2013/06/removing-previously-printed-lines.html"/>
    <updated>2013-06-08T15:27:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2013/06/removing-previously-printed-lines</id>
    <content type="html"><![CDATA[<p>I recently wrote small <a href="https://github.com/stevenocchipinti/tramtracker">Ruby Gem</a> that provides a command line interface to Melbourne&rsquo;s <a href="http://yarratrams.com.au/tramtracker">TramTracker service</a>.</p>

<p>One main feature I wanted was to allow the script to poll TramTracker on a regular basis.<br/>
In the past, I used the command line utility watch to achieve this, but I couldn&rsquo;t find a way to enforce a &ldquo;max iterations&rdquo; option.
If it gets forgotten about in the background, TramTracker will eventually block that IP address!</p>

<p>So I turned to Ruby. Now instead of printing the same block of text over and over again and filling up the terminal, I thought it would be better to just have that text overwrite itself in place.</p>

<p>In this post, I&rsquo;ll outline a couple of ways of achieving this.</p>

<h2>Using the \b (backspace) character</h2>

<p>Printing a \b character does a similar thing as pressing backspace, except instead of removing the character, it nondestructively shifts the cursor back which allows you to then overwrite previously written characters. This is really simple to use and is great for little &ldquo;progress&rdquo; spinners.<br/>
For example, a character that cycles through <code>|</code>, <code>/</code>, <code>-</code>, <code>\</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;foo</span><span class="se">\b</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># =&gt; foo</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;foo</span><span class="se">\b</span><span class="s2">x&quot;</span>
</span><span class='line'><span class="c1"># =&gt; fox</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;foo</span><span class="se">\b\b\b</span><span class="s2">bar&quot;</span>
</span><span class='line'><span class="c1"># =&gt; bar</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">step</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">;</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\b</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="s2">&quot;|/-</span><span class="se">\\</span><span class="s2">&quot;</span><span class="o">[</span><span class="n">i</span><span class="o">%</span><span class="mi">4</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; Cheesy, old-school spinner</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two main shortfalls with this approach, one is that it only works on a single line and two is that if you want to overwrite lots of characters, you&rsquo;d need just as many <code>\b</code> characters (you would probably introduce a loop).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;foo</span><span class="se">\n\b\b\b</span><span class="s2">bar&quot;</span>
</span><span class='line'><span class="c1"># =&gt; foo\nbar</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using the \r (carriage return) character</h2>

<p>To avoid having to repeat just as many <code>\b</code> characters, a simple alternative would be to return the cursor to the start of the line and write over the top of the existing characters. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\r</span><span class="s2">Downloading %</span><span class="si">#{</span><span class="nb">p</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">...&quot;</span><span class="p">;</span> <span class="nb">sleep</span> <span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This approach still won&rsquo;t work across multiple lines, but it has another subtle shortfall too, it doesn&rsquo;t clear the entire line. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;foo</span><span class="se">\r</span><span class="s2">p&quot;</span>
</span><span class='line'><span class="c1"># =&gt; poo</span>
</span></code></pre></td></tr></table></div></figure>


<p>A common work around for this is to pad the end of the string with spaces, but there are better ways (keep reading ;) )</p>

<h2>Using curses</h2>

<p>The most common answer to overwriting characters across multiple lines, is to use <a href="http://en.wikipedia.org/wiki/Curses_(programming_library)">curses</a>.
Curses allows you to pick exactly with character you want to update and makes <a href="https://www.google.com.au/search?hl=en&amp;q=command+line+curses&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.47534661,d.aGc&amp;biw=1366&amp;bih=679&amp;um=1&amp;ie=UTF-8&amp;tbm=isch&amp;source=og&amp;sa=N&amp;tab=wi&amp;ei=r0WzUbyWF4T-iAfn8IH4DA">menu driven Text User Interfaces</a> (TUI&rsquo;s) easier to develop.
Ruby happens to have a <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/curses/rdoc/Curses.html">curses module</a> built in to its standard library, which provides a simple API, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">setpos</span><span class="p">(</span><span class="n">lines</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># Start in the middle</span>
</span><span class='line'><span class="n">addstr</span><span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I created a more complete (simple) example of using curses in a <a href="https://gist.github.com/stevenocchipinti/5703381">gist here</a>.</p>

<p>Curses is pretty good for this sort of stuff, it gives you a lot for free.
The thing that I didn&rsquo;t like about using the curses library was that when it initialises, it clears the screen.
This behaviour suits a TUI, and the old contents is still restored when you return, but I was being picky and didn&rsquo;t want that.</p>

<h2>Using individual cursor movement characters</h2>

<p>This last option is the most fundamental of the bunch. Terminals generally support characters that will allow you to move the cursor around at will and would be the basis of things like curses, although not as commonly used. Here are the most common characters to move the cursor around:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">\</span><span class="mo">033</span><span class="o">[&lt;</span><span class="n">L</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&lt;</span><span class="n">C</span><span class="o">&gt;</span><span class="n">H</span> <span class="c1"># Move the cursor to line L, column C</span>
</span><span class='line'><span class="p">\</span><span class="mo">033</span><span class="o">[&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="n">A</span>     <span class="c1"># Move the cursor up N lines</span>
</span><span class='line'><span class="p">\</span><span class="mo">033</span><span class="o">[&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="n">B</span>     <span class="c1"># Move the cursor down N lines</span>
</span><span class='line'><span class="p">\</span><span class="mo">033</span><span class="o">[&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="n">C</span>     <span class="c1"># Move the cursor forward N columns</span>
</span><span class='line'><span class="p">\</span><span class="mo">033</span><span class="o">[&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="n">D</span>     <span class="c1"># Move the cursor backward N columns</span>
</span><span class='line'><span class="p">\</span><span class="mo">033</span><span class="o">[</span><span class="mi">2</span><span class="n">J</span>       <span class="c1"># Clear the screen, move to (0,0)</span>
</span><span class='line'><span class="p">\</span><span class="mo">033</span><span class="o">[</span><span class="n">K</span>        <span class="c1"># Erase to end of line</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can read more about these &ldquo;escape sequences&rdquo; <a href="http://www.linuxselfhelp.com/howtos/Bash-Prompt/Bash-Prompt-HOWTO-6.html#ss6.2">here</a>.
I ended up using the <code>\033[K</code> (&ldquo;Erase to end of line&rdquo;) and the <code>\033[A</code> (&ldquo;Move the cursor up&rdquo;) <a href="https://github.com/stevenocchipinti/tramtracker/blob/master/lib/formatters/polling_formatter.rb">characters in my TramTracker gem</a> and it worked a treat!</p>

<p>Now go and make a cool retro user interface! :)</p>
]]></content>
  </entry>
  
</feed>
