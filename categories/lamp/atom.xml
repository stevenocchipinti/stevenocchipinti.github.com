<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lamp | StevenOcchipinti.com]]></title>
  <link href="http://blog.stevenocchipinti.com/categories/lamp/atom.xml" rel="self"/>
  <link href="http://blog.stevenocchipinti.com/"/>
  <updated>2013-07-21T13:17:41+10:00</updated>
  <id>http://blog.stevenocchipinti.com/</id>
  <author>
    <name><![CDATA[Steven Occhipinti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhpRemoteAdmin]]></title>
    <link href="http://blog.stevenocchipinti.com/2011/06/phpremoteadmin.html"/>
    <updated>2011-06-24T02:56:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2011/06/phpremoteadmin</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
If you've ever used PhpMyAdmin before, you'll know it can be quite handy, especially for people like me who always forget SQL's syntax.<br />I even use it for simple tasks just so I can see what SQL it generated and it even has a handy "Create PHP Code" button to give me a baseline to start hacking the query to suit my situation.<br /><br />This is great for local setups, but sometimes I need to do a query a production database where PhpMyAdmin is not installed and its alot easier to inspect the data of big tables with a gui (at least for me anyway).<br /><br />Another helpful tip that I picked up from my new work place (thanks Rich) is to make PhpMyAdmin connect to a remote database via an SSH tunnel.<br />It requires a small config change to PhpMyAdmin, but it works a charm!<br /><br />To differentiate between a tunnelled database and the local one, you need to configure your web server to serve up PhpMyAdmin from an additional URL, such as <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">http://localhost/php<b>remote</b>admin</span> in addition to the standard <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">http://localhost/phpmyadmin</span>.<br /><br />I added a second alias for PhpMyAdmin in <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">/etc/apache2/conf.d/phpmyadmin.conf</span> to look like this:<br /><br /><blockquote style="font-family: &quot;Courier New&quot;,Courier,monospace;">Alias /phpmyadmin /usr/share/phpmyadmin<br />Alias /phpremoteadmin /usr/share/phpmyadmin</blockquote><br />Then, I modified my <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">/etc/phpmyadmin/config.inc.php</span> to include this:<br /><br /><blockquote style="font-family: &quot;Courier New&quot;,Courier,monospace;">// If phpremoteadmin is requested, use an ssh tunnel on 6666<br />// Note: This doesn't create the tunnel, use ~/bin/mysql_remote<br />if (substr_count($_SERVER["REQUEST_URI"], "phpremoteadmin") &gt; 0) {<br />$cfg['Servers'][$i]['connect_type'] = 'tcp';<br />$cfg['Servers'][$i]['port'] = '6666';<br />$cfg['Servers'][$i]['host'] = '127.0.0.1';<br />}</blockquote><br />Basically that means if the request is for <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">/phpremoteadmin</span>, look for the database on port 6666 instead of the preconfigured database port.<br /><br />You'l have to reload apache for these changes to take effect:<br /><blockquote><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">sudo /etc/init.d/apache2 reload</span></blockquote><br />Then you need a SSH tunnel from your local port 6666 to the servers port 3306 (where mysql is normally listening). To create this tunnel, you can use:<br /><br /><blockquote style="font-family: &quot;Courier New&quot;,Courier,monospace;">ssh -L 6666:localhost:3306 $USER@$HOST</blockquote><br />But, to make it easier, I use (a slight variation) of this script:<br /><br /><blockquote style="font-family: &quot;Courier New&quot;,Courier,monospace;">#!/bin/sh<br /><br />if [ $# -lt 1 ] || [ $# -gt 2 ]; then<br />&nbsp; echo "Usage: $0 host1 [host2]"<br />&nbsp; exit 2<br />fi<br /><br />USER="steve"<br />HOST=$1<br /><br />DBHOST="localhost"<br />[ -z "$2" ] || DBHOST="$2"<br /><br />echo "Browse to: http://localhost/phpremoteadmin"<br />ssh -L 6666:$DBHOST:3306 $USER@$HOST</blockquote><br />The script also allows you to pass in an optional argument of the host where the database is.<br />By default, that is localhost (the remote server's localhost). <br />This is useful if you can only ssh to a gateway server and the database is on another server within that remote network that you wouldn't normally be able to ssh directly to.<br /><br />This has been really helpful, so I wanted to share :)
</div>

]]></content>
  </entry>
  
</feed>
