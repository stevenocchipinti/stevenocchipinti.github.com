<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Steven Occhipinti]]></title>
  <link href="http://blog.stevenocchipinti.com/categories/vim/atom.xml" rel="self"/>
  <link href="http://blog.stevenocchipinti.com/"/>
  <updated>2016-12-28T15:44:05+11:00</updated>
  <id>http://blog.stevenocchipinti.com/</id>
  <author>
    <name><![CDATA[Steven Occhipinti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Search and Replace, Vim and Git]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/search-and-replace-in-multiple-files-with-vim-and-git/"/>
    <updated>2016-12-28T14:04:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/search-and-replace-in-multiple-files-with-vim-and-git</id>
    <content type="html"><![CDATA[<p>Git provides some nice utility functionality that can make a vim development
environment much nicer. With recent updates to Vim it can now execute a command
for every item in the quickfix list (<code>:cdo</code>) and location list (<code>:ldo</code>). These
features work together quite nicely.</p>

<p>This new functionality has been introduced to vim from version 7.4.858 and is
therefore available in vim8 and also available in neovim.</p>

<h2>The Old Way</h2>

<p>Back in 2011 I wrote a
<a href="http://blog.stevenocchipinti.com/2011/05/search-and-replace-in-multiple-files.html/">post about doing search and replace across multiple files</a>
with just the basic vim functionality. It&rsquo;s quite common to use the arg list
because its easy to add to:</p>

<pre><code class="vim">:arg *.js
:arg `git ls-files`
</code></pre>

<p>and it&rsquo;s easy to execute commands:</p>

<pre><code class="vim">:argdo %s/foo/bar/gc
</code></pre>

<h2>The New Way</h2>

<p>Now that we can execute a command from the quickfix and location lists it is
much easier to make larger, more controlled edits with the help of other
features or plugins.</p>

<p>If you use <code>syntastic</code> or <code>neomake</code> for linting, a compiler via the <code>:make</code>
command, the built in <code>:grep</code> or <code>:vimgrep</code> commands or any number of other
plugins that integrate with these lists, such as
<a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a>, you can take advantage of
<code>:cdo</code> and <code>:ldo</code>.</p>

<pre><code class="vim">:grep foo **/*.js
</code></pre>

<p>Then you can execute commands like this:</p>

<pre><code class="vim">:cdo s/foo/bar/gc
</code></pre>

<h2>Git Is Awesome</h2>

<p>Git is incredibly powerful and I often use a couple of features that are often
overlooked:</p>

<ul>
<li><code>git ls-files</code> - recursively list all the files in the repo</li>
<li><code>git grep</code> - grep through all the files in the repo</li>
</ul>


<p>One of the reasons these commands are so good is because by default they will
ignore the items in the <code>.gitignore</code> file.</p>

<p>I tend to work with javascript a fair bit and having an easy way to avoid those
nasty <code>node_modules</code> directories readily available is great! Best of all, these
tools are available on just about every machine I work, on including the
machines of other peoples that I pair with.</p>

<h2>My Workflow</h2>

<p>I use <code>ctrl-p</code> in vim and rather than relying on yet another third party tool
like <code>ack</code> or <code>ag</code>, I&rsquo;ve configured <code>crtl-p</code> like this:</p>

<pre><code class="vim">let g:ctrlp_user_command = [
\  '.git',
\  'cd %s &amp;&amp; git ls-files . -co --exclude-standard',
\  'find %s -type f'
\]
</code></pre>

<p>It is super fast and I haven&rsquo;t come across a situation where I need ctrl-p for a
large enough non-git repo and <code>find</code> wasn&rsquo;t good enough for&hellip; yet!</p>

<p>If you use <a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a>, there is also
a <code>:Ggrep</code> command that behaves much like the builtin <code>:grep</code> command, but it
will ignore the <code>.gitignore</code> items. I use this quite a lot too:</p>

<pre><code class="vim">:Ggrep foo
:Ggrep foo **/*.js
</code></pre>

<p>Then you can execute commands in the same manner as above:</p>

<pre><code class="vim">:cdo s/foo/bar/gc
</code></pre>

<p>Because I use this so often, I&rsquo;ve added the following mapping to my config to
automatically search for the token under my cursor:</p>

<pre><code>map &lt;leader&gt;g :Ggrep!  &lt;Bar&gt; copen
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Netrw Instead of NERDTree for Vim]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/using-netrw-instead-of-nerdtree-for-vim/"/>
    <updated>2016-12-28T09:36:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/using-netrw-instead-of-nerdtree-for-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to attempt to use netrw exclusively for a while instead of NERDTree.
Mainly because not everyone has NERDTree, but everyone I work with will
generally have netrw installed by default so I thought I should be become more
proficient with it.</p>

<p>This post should provide me something I can quickly refer back to when I get
stuck. Netrw has a lot of features and the help page is pretty comprehensive.
It&rsquo;s worth a quick look, at least at the table of contents. It&rsquo;s available by
typing <code>:help netrw</code>.</p>

<p>There is also a quick reference for the mapping by typing <code>:help netrw-quickmap</code>
and one for the commands by typing <code>:help netrw-quickcom</code>.</p>

<h2>Navigation</h2>

<p>Navigating around netrw is pretty intuitive, you use the arrows (or hjkl) to
move around and <code>enter</code> to open files or directories. These windows are just
like any other window in vim so most of the usual motions, etc. work except
netrw adds some default mappings. Here are the basics for navigation:</p>

<p><code>enter</code>  -  Open files/directories<br/>
<code>-</code>      -  Go up one directory<br/>
<code>u</code>      -  Go back to previously visited directory (like <code>&lt;C-o&gt;</code> in vim)<br/>
<code>U</code>      -  Go forward to subsequently visited directory (like <code>&lt;C-i&gt;</code> in vim)</p>

<p><code>enter</code> works just fine to open files and directories, but there are some other
options available too:</p>

<p><code>o</code>  -  Open file/directory in new horizontal split<br/>
<code>v</code>  -  Open file/directory in new vertical split<br/>
<code>t</code>  -  Open file/directory in new tab<br/>
<code>p</code>  -  Preview file without (moving the cursor from netrw)<br/>
<code>x</code>  -  Open the file/directory with the default system app</p>

<h2>Appearance and Behaviour</h2>

<p>One of the first things I noticed when making the switch was when you press
<code>enter</code> on a directory, instead of displaying the contents of the sub-directory
inline, it would replace the whole buffer with the contents of the
sub-directory.</p>

<p>This is because by default netrw doesn&rsquo;t use a tree to display the
files/directories, its more like doing an <code>ls</code> but you can configure netrw to
print a tree and have the same behaviour as NERDTree with this mapping:</p>

<p><code>i</code> - Cycle between different listing modes (one of them is tree mode)</p>

<ul>
<li>In normal mode, <code>enter</code> will move into and show the given file/directory</li>
<li>In tree mode, <code>enter</code> will show the contents of the sub-directory in addition</li>
</ul>


<p>While netrw doesn&rsquo;t look as nice as NERDTree, it still has a lot of options to
customize the way it looks and works.</p>

<p><code>I</code>   -  Toggle the banner<br/>
<code>c</code>   -  Make the browsing directory the current working directory<br/>
<code>gn</code>  -  Make the directory under the cursor the top of the tree<br/>
<code>gh</code>  -  Toggle hidden files on or off<br/>
<code>a</code>   -  Cycle between all files, not hidden files or just hidden files visible<br/>
<code>s</code>   -  Cycle sort order between name, time or filesize<br/>
<code>r</code>   -  Reverse sort order</p>

<h2>File Operations</h2>

<p>It&rsquo;s also pretty easy to do basic file operations:</p>

<p><code>%</code>   -  Create a new file<br/>
<code>d</code>   -  Create a new directory<br/>
<code>D</code>   -  Delete the file/directory under the cursor (or marked files/dirs)<br/>
<code>R</code>   -  Rename/move file/directory</p>

<p>Copying files however is a little more involved. You need to mark the files you
want to copy, mark the destination, then execute the operation (a little
tedious):</p>

<p><code>mf</code>  -  Toggle whether the file/directory is marked<br/>
<code>mt</code>  -  Mark the directory under the cursor as the copy target<br/>
<code>mc</code>  -  Execute the copy operation<br/>
<code>mu</code>  -  Unmark all marked items</p>

<h2>Commands</h2>

<p>To open netrw is easy. You can use all the same commands you would use to open a
file except give them a directory. You can use the command line with <code>vim .</code> or
within vim with the commands below. These commands don&rsquo;t even need a space
between it and its arguments, so its very few keystrokes:</p>

<p><code>:e.</code>     - Open the current directory normally<br/>
<code>:sp.</code>    - Open the current directory in a horizontal split<br/>
<code>:vs.</code>    - Open the current directory in a vertical split<br/>
<code>:tabe.</code>  - Open the current directory in a new tab</p>

<p>These will all work, unless you have installed an alternative explorer plugin
(like NERDTree), in which case you can explicitly open netrw with <code>:Ntree</code>.</p>

<p>Netrw also provides a lot of different ways to launch an explorer window. The
most common command is <code>:Explore</code> which will open netrw in the directory of the
currently open file, much like the <code>:NERDTreeFind</code> command. Here are some
variations of that command:</p>

<p><code>:Ex</code>    -  Use current buffer if available, otherwise split horizontally<br/>
<code>:Ex!</code>   -  Use current buffer if available, otherwise split vertically</p>

<p><code>:Sex!</code>  -  Horizontal split<br/>
<code>:Hex</code>   -  Horizontal split<br/>
<code>:Hex!</code>  -  Horizontal split (opposite side)</p>

<p><code>:Sex</code>   -  Vertical split<br/>
<code>:Vex</code>   -  Vertical split<br/>
<code>:Vex!</code>  -  Vertical split (opposite side)</p>

<p><code>:Tex</code>   -  New tab, directory of currently open buffer</p>

<p>There is another variation that doesn&rsquo;t use the directory of currently open
buffer but uses the current working directory. This is one is the most similar
to the default <code>:NERDTree</code> command.</p>

<p><code>:Lex</code>   -  Vertical split full height, current working directory<br/>
<code>:Lex!</code>  -  Vertical split, current working directory (opposite side)</p>

<p>All these commands can also take a directory as an argument.</p>

<h2>Basic Configuration</h2>

<p>I didn&rsquo;t want to customize too much because that would defeat the purpose of the
learning the defaults, but I did want to turn off that banner (it was handy
having the basic operations on display, but I don&rsquo;t think I need it anymore).</p>

<pre><code class="vim">let g:netrw_banner=0
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+,\(^\|\s\s\)ntuser\.\S\+'
autocmd FileType netrw set nolist
</code></pre>

<h2>More Features</h2>

<p>There is more to explore with netrw, such as working with bookmarks and pattern
listings, but this post should have enough of the basics to be productive.
Checkout <code>:help netrw</code> for more features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Vim for IDE Users]]></title>
    <link href="http://blog.stevenocchipinti.com/2014/03/17/introduction-to-vim-for-ide-users/"/>
    <updated>2014-03-17T17:23:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2014/03/17/introduction-to-vim-for-ide-users</id>
    <content type="html"><![CDATA[<blockquote><p>I&rsquo;d love to learn Street Fighter 2, but there are just so many combos! <br/>
- <a href="http://robots.thoughtbot.com/the-vim-learning-curve-is-a-myth">The Vim Learning Curve is a Myth</a>, Thoughtbot</p></blockquote>

<p>A lot of people are scared of learning of vim because of the initial learning curve.</p>

<p>When learning vim for the first time there are lots of approaches, but two common ways are:</p>

<ol>
<li>Learn &ldquo;pure&rdquo; vi/vim, then introduce vimrc options and then plugins</li>
<li>Start with an existing &ldquo;customization&rdquo; (from someone else), then learn what things do</li>
</ol>


<p>Once upon a time, I would have suggested learning the basic features of vim before getting into customization, but there are quite a lot of people who are not interested in learning the tool unless they can be productive straight away.<br/>
When coming from an IDE, the apparent shortcomings of a less integrated text editor will scare them away before they have discovered the power of editing text with vim.</p>

<p>This guide is aimed at those people. I want to outline some steps to learn vim that makes the transition from IDE to vim as easy as possible with the hope of making vim a less scary step.</p>

<h2>Installing Vim</h2>

<p>Most systems will come with a version of vim, but you may want to get the latest version from the systems package manager for a more complete feature set.</p>

<p>On a mac, the standard install of <code>vim</code> is missing clipboard support so I would recommend installing MacVim, here is how I do it with homebrew:</p>

<pre><code>brew install macvim
brew linkapps
</code></pre>

<p>This package provides <code>mvim</code> on the command line, but <code>vim</code> will still refer to the system version, so I setup a couple of aliases in my <code>.bash_profile</code>:</p>

<pre><code>alias vim="mvim -v"
alias vi="vim"
</code></pre>

<h2>Basic Usage</h2>

<p>This guide is more about setting up vim in a manner that won&rsquo;t seem too crippling when coming from an IDE, so I won&rsquo;t focus too much on editing effectively with vim here.</p>

<p>If vim is completely new to you and you don&rsquo;t know the basics such as the difference between <em>command mode</em> and <em>insert mode</em> or how to quit vim, I would recommend pausing the guide here and running <code>vimtutor</code> in your terminal to learn the basics.</p>

<h2>Configuring Vim</h2>

<p>Vim uses a <code>.vimrc</code> configuration file in your home directory. There is a plethora of configuration options you can put here, but I thought I would offer some basic options to get you started.</p>

<p>My <a href="https://github.com/stevenocchipinti/dotvim/blob/master/vimrc"><code>.vimrc</code></a> is quite large, but here is a snippet for some basic options that you can put into your own <code>.vimrc</code> to get started:</p>

<pre><code>filetype plugin indent on
syntax on

set ts=2 sw=2         " Use 2 spaces for tabs
set expandtab         " Use spaces instead of tab characters
set wrap              " Wrap the display lines (not actual text)
set linebreak
set backspace=indent,eol,start
set incsearch         " Show matching search results as typing
set ruler             " Show row and column in status bar
set wildmenu          " Nicer tab completion for :ex commands
set ignorecase        " Case insensitive search by default
set smartcase         " Use case sensitive search in a capital letter is used
set warn              " Show what mode your in (insert, etc.)
set scrolloff=3       " Number of lines to always show at at the top and bottom
set autoindent        " Copy the indentation from the previous line
set colorcolumn=81    " Highlight the 81st column (shorthand = :set cc=81)
set cursorline        " Highlight the line which the cursor is on
set laststatus=2      " Always show a status bar
set mouse=a           " Make the mouse work - even in terminals
set list              " Show `listchars` characters
set listchars=tab:=»,trail:·

" Easier way to copy and paste from the global clipboard
map &lt;leader&gt;p "+p
map &lt;leader&gt;y "+y
</code></pre>

<h2>Navigating code</h2>

<p>Vim has builtin support for <code>ctags</code>, which indexes your code and allows you to jump to the definition of a method or class. As usual, on a mac you will have a standard version of <code>ctags</code> installed, but it&rsquo;s not very good, so I recommend installing the <em>exuberant ctags</em> package from homebrew:</p>

<pre><code>brew install ctags
sudo mv /usr/bin/ctags{,-bsd}
sudo ln -s /usr/local/Cellar/ctags/5.8/bin/ctags /usr/bin/ctags
</code></pre>

<p>To make use of ctags, in the root of a project run the following command:</p>

<pre><code>ctags -R .
</code></pre>

<p>This will need to be run when the code changes to keep the tags file up to date, so I have setup <a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">git hooks</a> to automate this. If you don&rsquo;t want to setup git hooks, you can execute this command from within vim with <code>:!ctags -R .</code></p>

<p>Now if you open some code, move your cursor over an occurrence of a method or class, you can jump into the definition of that method or class with the following key bindings:</p>

<p><code>crtl</code> + <code>]</code> = Jump to definition (of what is under the cursor)<br/>
<code>crtl</code> + <code>T</code> = Jump back from following a tag</p>

<p>The following key bindings are also useful for navigation and do <em>not</em> require ctags:</p>

<p><code>/foo</code> = Search for <code>foo</code><br/>
<code>*</code> = Search for the word under the cursor<br/>
<code>n</code> = Jump to the next occurrence of the search<br/>
<code>N</code> = Jump to the previous occurrence of the search<br/>
<code>crtl</code> + <code>o</code> = Go back from the last jump<br/>
<code>crtl</code> + <code>i</code> = Go forward to the recent jump</p>

<h2>Vim Plugins</h2>

<p>Vim has a plugin system, but by default it does not do a good job of keeping plugins isolated from each other. To improve this, there are plugins that manage plugins.<br/>
I recommend using <a href="https://github.com/gmarik/vundle">Vundle</a>, here is how to set it up along with a few useful vim plugins:</p>

<pre><code>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
</code></pre>

<p>Then place the following at the top of your <code>.vimrc</code>:</p>

<pre><code>filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'gmarik/vundle'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/matchit.zip'
Plugin 'scrooloose/syntastic'
Plugin 'bogado/file-line'

call vundle#end()
filetype plugin indent on
</code></pre>

<p>Then, I choose configure some of those plugins towards the bottom of the <code>.vimrc</code> like this:</p>

<pre><code>" NERDTREE PLUGIN - (mnemonic: Files)
nmap &lt;leader&gt;f :NERDTreeToggle&lt;CR&gt;
nmap &lt;leader&gt;F :NERDTreeFind&lt;CR&gt;

" CTRL-P PLUGIN
let g:ctrlp_user_command = {
\   'types': {
\     1: ['.git/', 'cd %s &amp;&amp; git ls-files'],
\     2: ['.hg/', 'hg --cwd %s locate -I .'],
\   },
\   'fallback': 'find %s -type f'
\ }
</code></pre>

<p>Now, from within vim, run <code>:BundleInstall</code></p>

<h2>Next steps</h2>

<p>At this point, you should have a somewhat powerful installation of vim, the next step is to learn how to use this power. Below are some resources to help you learn how to use vim effectively.</p>

<ul>
<li>run <code>vimtutor</code> on the command line to learn</li>
<li><a href="http://vimcasts.org/">vimcasts</a></li>
<li><a href="http://www.vimgolf.com/">vimgolf</a></li>
<li><a href="http://github.com/stevenocchipinti/dotvim">my .vimrc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursive Search With Vimgrep]]></title>
    <link href="http://blog.stevenocchipinti.com/2011/10/recursive-search-with-vimgrep.html"/>
    <updated>2011-10-12T02:46:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2011/10/recursive-search-with-vimgrep</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
Usually when I need to find things in multiple files, I would use <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">grep</span> or <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">ack</span> from a terminal and then open those files in vim to do whatever it is that I have to do.<br /><br />This is ok, but sometimes this can be a little annoying.<br />Vim has a <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:grep</span> function which will use the system <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">grep</span> command, but it also has a <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:vimgrep</span> function that is built in to vim.<br /><br />I had left a bunch of TODO's through out my code as a reminder to come back to them, so using <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:vimgrep</span> I was able to quickly jump between them:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">:vimgrep TODO **/*</div></blockquote><br />This tells vim to search for the pattern "<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">TODO</span>" recursively from the current directory.<br />The "<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">**/</span>" means recursive and the "<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">*</span>" means any file - therefore "<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">**/*.rb</span>" would just search the ruby scripts.<br /><br />The results are loaded into the "quickfix window". This means if you want to see all the occurences, you can open the list with <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:copen</span><br />Naturally, <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:cnext</span>, <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:cprevious</span>, <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:cfirst</span>, <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:clast</span>, etc. will allow you to jump between them or you can use the quicklist window and press enter on the filename, or in gvim you can even use the mouse.<br /><br />In addition, I use <a href="https://github.com/tpope/vim-unimpaired">Tim Pope's Unimpaired vim plugin</a>,which provides the easy shortcuts '<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">[q</span>' and '<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">]q</span>' for <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:cprevious</span> and <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:cnext</span> (respectively)
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex Substitution 101]]></title>
    <link href="http://blog.stevenocchipinti.com/2011/08/regex-substitution-101.html"/>
    <updated>2011-08-01T07:42:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2011/08/regex-substitution-101</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
A while ago I was helping a friend with a regex.<br />He  wanted to extract parts of the <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">/etc/passwd</span> file, so I explained my basic thought process to him so he could understand how I came up with the pattern.<br />I thought I would (paraphrase and) blog this explanation, as it might just help others out too.<br /><br /><b>The Explanation:</b><br />First you have to write a regex that matches as much of the string (in this case the lines in the <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">passwd</span> file) as you need (or all of it to be safe):<br /><br /><blockquote><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">[^:]</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = will match a character that is not a colon</blockquote><br />You can repeat this pattern with the * operator to match everything up to the first colon (because that wont match the pattern):<br /><br /><blockquote><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">[^:]*</span>&nbsp;&nbsp;&nbsp;&nbsp; = will match everything up to the colon</blockquote><br />That pattern obviously doesnt have the bit you want, so you need to keep matching...<br />The next character you need to match is the colon itself:<br /><br /><blockquote><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">[^:]*:</span>&nbsp;&nbsp;&nbsp; = will match everything up to the colon, and then one colon character too</blockquote><br />This isn't enough either, but now you just need to repeat your self for as many sections as you want.<br />There is 6 colons and 7 fields in your example of the passwd file, so repeat the pattern to suit:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*</div></blockquote><br />Now this pattern will match the entire string by going through section-by-section.<br />Of course .* would also match the whole string, but now we have parts of the pattern that represent parts of the string.<br />Using these parts, we can wrap the bit you want to use with backreferences (brackets) so we can use them later.<br /><br />Lets say you only wanted the 5th field (the username).<br />First, wrap the 5th field in a backreference.<br />Note you have to escape the brackets with a backslash otherwise it will look for an actual bracket character:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\):[^:]*:[^:]*</div></blockquote><br />Now you can use it in a substitution, which will replace everything that is matched with what you tell it to:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">:%s/[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\):[^:]*:[^:]*/hello</div></blockquote><br />This will replace what it has matched (which is everything) with the word 'hello'<br />Now you can add that part that you captured earlier with the backreference<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">:%s/[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\):[^:]*:[^:]*/hello \1</div></blockquote><br />The \1 means the first backreference, if you had 2 sets of backets, you could also use \2<br />Running this substition will result in this line:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">apache:x:48:48:Apache:/var/www:/sbin/nologin</div></blockquote><br />becoming this line:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">hello Apache</div></blockquote><br />To extend this further, you could add stuff like this:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">:%s/[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\):\([^:]*\):[^:]*/hello \1, I know you home is \2 because I know regex</div></blockquote><br />Which would result in this line:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">hello Apache, I know you home is /var/www because I know regex</div></blockquote><br />Obviously you wouldnt want to make these substitutions in your passwd file, but you could use this regex substitution in a pipeline with sed, like this:<br /><br /><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">cat /etc/passwd | sed "s/[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\):\([^:]*\):[^:]*/hello \1, I know you home is \2 because I know regex/" &gt; ~/regexed.txt</div></blockquote><br />Note that unlike vim, sed requires the substitution to be terminated with a trailing separator, so valid syntaxes are:<br /><div style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br /></div><blockquote><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">sed =&nbsp; sed 's/PATTERN/REPLACEMENT/'</div><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">vim =&nbsp; :s/PATTERN/REPLACEMENT/</div><div style="font-family: &quot;Courier New&quot;,Courier,monospace;">vim =&nbsp; :s/PATTERN/REPLACEMENT</div></blockquote><br />The last separator is useful for putting additional options, such as <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">g</span> for global replaces (multiple times on one line), etc.<br /><br />Another helpful note is that the separator does not have to be / it could be (almost) any character.<br />For example, / might be cumbersome if your dealing with paths that have a lot of /'s, so you could use # instead:<br /><blockquote><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">%s#this#that#g </span></blockquote>
</div>

]]></content>
  </entry>
  
</feed>
