<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Steven Occhipinti]]></title>
  <link href="http://blog.stevenocchipinti.com/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.stevenocchipinti.com/"/>
  <updated>2016-12-28T15:44:05+11:00</updated>
  <id>http://blog.stevenocchipinti.com/</id>
  <author>
    <name><![CDATA[Steven Occhipinti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Search and Replace, Vim and Git]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/search-and-replace-in-multiple-files-with-vim-and-git/"/>
    <updated>2016-12-28T14:04:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/search-and-replace-in-multiple-files-with-vim-and-git</id>
    <content type="html"><![CDATA[<p>Git provides some nice utility functionality that can make a vim development
environment much nicer. With recent updates to Vim it can now execute a command
for every item in the quickfix list (<code>:cdo</code>) and location list (<code>:ldo</code>). These
features work together quite nicely.</p>

<p>This new functionality has been introduced to vim from version 7.4.858 and is
therefore available in vim8 and also available in neovim.</p>

<h2>The Old Way</h2>

<p>Back in 2011 I wrote a
<a href="http://blog.stevenocchipinti.com/2011/05/search-and-replace-in-multiple-files.html/">post about doing search and replace across multiple files</a>
with just the basic vim functionality. It&rsquo;s quite common to use the arg list
because its easy to add to:</p>

<pre><code class="vim">:arg *.js
:arg `git ls-files`
</code></pre>

<p>and it&rsquo;s easy to execute commands:</p>

<pre><code class="vim">:argdo %s/foo/bar/gc
</code></pre>

<h2>The New Way</h2>

<p>Now that we can execute a command from the quickfix and location lists it is
much easier to make larger, more controlled edits with the help of other
features or plugins.</p>

<p>If you use <code>syntastic</code> or <code>neomake</code> for linting, a compiler via the <code>:make</code>
command, the built in <code>:grep</code> or <code>:vimgrep</code> commands or any number of other
plugins that integrate with these lists, such as
<a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a>, you can take advantage of
<code>:cdo</code> and <code>:ldo</code>.</p>

<pre><code class="vim">:grep foo **/*.js
</code></pre>

<p>Then you can execute commands like this:</p>

<pre><code class="vim">:cdo s/foo/bar/gc
</code></pre>

<h2>Git Is Awesome</h2>

<p>Git is incredibly powerful and I often use a couple of features that are often
overlooked:</p>

<ul>
<li><code>git ls-files</code> - recursively list all the files in the repo</li>
<li><code>git grep</code> - grep through all the files in the repo</li>
</ul>


<p>One of the reasons these commands are so good is because by default they will
ignore the items in the <code>.gitignore</code> file.</p>

<p>I tend to work with javascript a fair bit and having an easy way to avoid those
nasty <code>node_modules</code> directories readily available is great! Best of all, these
tools are available on just about every machine I work, on including the
machines of other peoples that I pair with.</p>

<h2>My Workflow</h2>

<p>I use <code>ctrl-p</code> in vim and rather than relying on yet another third party tool
like <code>ack</code> or <code>ag</code>, I&rsquo;ve configured <code>crtl-p</code> like this:</p>

<pre><code class="vim">let g:ctrlp_user_command = [
\  '.git',
\  'cd %s &amp;&amp; git ls-files . -co --exclude-standard',
\  'find %s -type f'
\]
</code></pre>

<p>It is super fast and I haven&rsquo;t come across a situation where I need ctrl-p for a
large enough non-git repo and <code>find</code> wasn&rsquo;t good enough for&hellip; yet!</p>

<p>If you use <a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a>, there is also
a <code>:Ggrep</code> command that behaves much like the builtin <code>:grep</code> command, but it
will ignore the <code>.gitignore</code> items. I use this quite a lot too:</p>

<pre><code class="vim">:Ggrep foo
:Ggrep foo **/*.js
</code></pre>

<p>Then you can execute commands in the same manner as above:</p>

<pre><code class="vim">:cdo s/foo/bar/gc
</code></pre>

<p>Because I use this so often, I&rsquo;ve added the following mapping to my config to
automatically search for the token under my cursor:</p>

<pre><code>map &lt;leader&gt;g :Ggrep!  &lt;Bar&gt; copen
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Author Email Addresses Per Git Repository]]></title>
    <link href="http://blog.stevenocchipinti.com/2016/12/28/different-author-email-addresses-per-git-repository/"/>
    <updated>2016-12-28T02:30:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2016/12/28/different-author-email-addresses-per-git-repository</id>
    <content type="html"><![CDATA[<p>Git v2.8 introduced a new configuration option called <code>user.useconfigonly</code>. This
option prevents git from trying to guess your email address to use for the
author metadata for a commit and forces you to have configured one.</p>

<p>This is great news because with a good workflow in place you can be sure you
always have the correct email addresses on your commits.</p>

<h2>Global Configuration</h2>

<p>If <code>user.useconfigonly</code> is set to <code>true</code>, you will need to configure an email
address. The simplest way is with this command:</p>

<pre><code>git config --global user.name 'Steve Occhipinti'
git config --global user.email steve@example.com
</code></pre>

<p>Which will result in a configuration like this saved in <code>~/.gitconfig</code>:</p>

<pre><code>[user]
  name = Steve Occhipinti
  email = steve@example.com
</code></pre>

<p>This is great, but what if you want to work on personal projects and work
projects on the same machine?</p>

<h2>Per Repository Configuration</h2>

<p>Instead of using the global config in the home directory, git will first look
for a local configuration in <code>./.git/config</code>. To set per repository
configuration, all you have to do is <code>cd</code> to the repo and run the same commands
but without the <code>--global</code> flag:</p>

<pre><code>git config user.name 'Steve Occhipinti'
git config user.email steve@example.com
</code></pre>

<h2>Mixing Work And Personal</h2>

<p>If you have a global configuration, all repositories will use that as a default
unless you remember to set a per-repository config. If you don&rsquo;t set a global
config, git will normally guess what your email is and use that if its valid.</p>

<p>If you set the <code>useconfigonly</code> option and remove your global config, git will
not allow you to make a commit until you&rsquo;ve setup your user details and this
will prevent accidentally using your work email address on a personal project or
vice-versa.</p>

<p>However, I do leave my name configured globally as that is not going to change
between repositories.</p>

<h2>Visual Queues</h2>

<p>Having that error appear when you haven&rsquo;t setup an email address is great, but
rather than waiting for me to make a mistake, I added an exclamation mark
indicator to my shell prompt to remind me to set up the user details.</p>

<p>The basic idea is something like this:</p>

<pre><code class="bash">local noauthor
git config user.email &gt; /dev/null || noauthor="!"
export $PS1="$noauthor${PS1}"
</code></pre>

<h2>Quicker Configuration</h2>

<p>If this is something that I will have to do for every repo I create or clone, I
want to it be pain free. Git makes it really easy to create new sub commands
simply by putting a script named <code>git-xxxx</code> in the path, where <code>xxxx</code> is the
sub command name.</p>

<p>I created a <code>git-author</code> script like this:</p>

<pre><code class="bash">#!/bin/bash
set -e

email_list_file="$HOME/.config/git/author-emails"
has_pecorb=$(type pecorb &gt; /dev/null 2&gt;&amp;1)

echo "Current author: $(git config user.name) &lt;$(git config user.email)&gt;"

if [ -f $email_list_file ] &amp;&amp; $has_pecorb; then
  email=$(pecorb $email_list_file)
else
  echo -n "Enter a new email address: "
  read email
fi

git config user.email $email
</code></pre>

<p>Now when go to a repo and I see my <code>!</code> indicator, all I have to do is run <code>git
author</code>.</p>

<p>This allows me to put all my email addresses in a file and then select the one I
want from a nice menu. Note, I&rsquo;m using <code>pecorb</code> here which is a
<a href="https://github.com/stevenocchipinti/pecorb">gem I wrote</a> to generate selectable
menus on the command line, but there are plenty of
<a href="https://github.com/stevenocchipinti/pecorb#kudos">alternatives</a> or you could
just use <code>read</code> in <code>bash</code> and type it in (which my script falls back to).</p>

<h2>My Bash Prompt</h2>

<p>The prompt I use may not be the tidiest, but its available
<a href="https://github.com/stevenocchipinti/homesync/blob/1a345e563afb47b81d405d47e4a6b45b63e82c98/data/.bash_git">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Author and Email in Every Commit]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/06/01/rewriting-author-and-email-in-every-commit/"/>
    <updated>2015-06-01T00:08:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/06/01/rewriting-author-and-email-in-every-commit</id>
    <content type="html"><![CDATA[<p>Following on from a previous post about <a href="http://blog.stevenocchipinti.com/2015/04/30/rewriting-indentation-in-every-file-and-every-commit/">rewriting indentation for an entire git repo</a>,
another reason to rewrite the history of a whole repo is to change the email
address or name mentioned in commits.</p>

<p>Once again, be aware that rewriting history will cause problems if other people
have clones of the repo so make sure you understand the risks before doing
this!</p>

<p>To change the author name and email address for every commit, you can run this:</p>

<pre><code class="bash">git filter-branch -f --env-filter "
  GIT_AUTHOR_NAME='YOUR_NAME'
  GIT_AUTHOR_EMAIL='YOUR_EMAIL'
  GIT_COMMITTER_NAME='YOUR_NAME'
  GIT_COMMITTER_EMAIL='YOUR_EMAIL'
" HEAD
</code></pre>

<p>This will blindly replace all the commits with the details given, but if other
people have contributed, you may need to be a bit more careful and only replace
your own:</p>

<pre><code class="bash">git filter-branch --commit-filter "
  if [ "$GIT_COMMITTER_NAME" = 'YOUR_ORIGINAL_NAME'];
  then
    GIT_AUTHOR_NAME='YOUR_NEW_NAME'
    GIT_AUTHOR_EMAIL='YOUR_NEW_EMAIL'
    GIT_COMMITTER_NAME='YOUR_NEW_NAME'
    GIT_COMMITTER_EMAIL='YOUR_NEW_EMAIL'
    git commit-tree "$@";
  else
    git commit-tree "$@";
  fi
" HEAD
</code></pre>

<p>If you understand the risks of rewriting history for a shared repository, you
can force push with the <code>-f</code> flag:</p>

<pre><code>git push -f
</code></pre>

<p>Then, to ensure future commits don&rsquo;t use the wrong name and email, you can set
it explicity for this particular repo (instead of globally) with these
commands:</p>

<pre><code>git config user.email "your_email@example.com"
git config user.email "your_email@example.com"
</code></pre>

<p>Keep in mind this will only work for this particular clone as the details will
be stored locally in <code>.git/config</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Indentation in Every File and Every Commit]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/04/30/rewriting-indentation-in-every-file-and-every-commit/"/>
    <updated>2015-04-30T21:51:00+10:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/04/30/rewriting-indentation-in-every-file-and-every-commit</id>
    <content type="html"><![CDATA[<p>It seems the JavaScript community is divided into two camps when it comes to
indentation conventions: two spaces or four?</p>

<p>I personally prefer two spaces mainly because its what I&rsquo;m used to in Ruby, I
find it easier on the eyes and just that little bit easier to keep my lines
under 80 characters long (yes, I still think this is good practice).</p>

<p>Our team had come to a general consensus for using two spaces, but when we were
starting a new project based on an existing project that used four spaces, we
thought it would be nice to fix all the whitespace in one go.</p>

<p>In a rush, we made a commit that literally replaced all the whitespace with the
following command:</p>

<pre><code class="bash">find . -type f -exec sed -i "" "s/    /  /g" {} \;
</code></pre>

<p>The problem with this approach is that it makes going through commit messages
harder. It means that when you use <code>git annotate</code>, every line with indentation
is going to have the whitespace fix as the last commit, so then you would have
to jump back another commit to get the actual commit message for that line,
which can be fairly annoying.</p>

<p>Luckily, if you are forking an existing repository for a new project you have
the luxury of being able to rewrite history without causing any pain to others
as no one else would have checked it out yet.</p>

<p>Git provides a powerful command called <code>filter-branch</code>. It is designed to
rewrite large amounts of history in one go. This can be useful to purge
sensitive information from every commit or update an email address in the
commit data, etc. The only problem with this is, just like rebasing, any
existing checkouts will not be able to simply use <code>git pull</code> cleanly after the
history has been rewritten upstream, but this isn&rsquo;t a problem for new projects.</p>

<p>In order to execute the command above for every commit in our repo, we can make
use of the <code>--tree-filter</code> option like this:</p>

<pre><code class="bash">git filter-branch --tree-filter 'find . -type f -exec sed -i "" "s/    /  /g" {} \;' HEAD
</code></pre>

<p>Please note, this can take quite some time, especially for large repositories.
You should also make sure there are no files that specifically need four spaces
(like markdown files, etc.), otherwise you may want to restrict the <code>find</code>
command to only effect files you know are safe to change (<code>*.js</code> for example).</p>

<p>For more information on rewriting history and <code>git filter-branch</code>, see this
<a href="https://git-scm.herokuapp.com/book/en/v2/Git-Tools-Rewriting-History#The-Nuclear-Option:-filter-branch">article</a>
and the
<a href="https://git-scm.herokuapp.com/docs/git-filter-branch">documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Reset Cheatsheet]]></title>
    <link href="http://blog.stevenocchipinti.com/2015/03/24/git-reset-cheatsheet/"/>
    <updated>2015-03-24T11:13:00+11:00</updated>
    <id>http://blog.stevenocchipinti.com/2015/03/24/git-reset-cheatsheet</id>
    <content type="html"><![CDATA[<p>The <code>reset</code> command in git does quite a lot, but I always forget all its uses.<br/>
This is a cheatsheet based on <a href="http://git-scm.com/blog/2011/07/11/reset.html">this blog</a>.</p>

<p>The <code>reset</code> command will:<br/>
1. Move whatever branch <code>HEAD</code> points to <em>(stop here unless <code>--soft</code>)</em><br/>
2. THEN, make the Index look like that <em>(stop here unless <code>--hard</code>)</em><br/>
3. THEN, make the Working Directory look like that</p>

<h2>Commit level</h2>

<table>
<thead>
<tr>
<th>                            </th>
<th> Updates Current Branch? </th>
<th> Updates Index? </th>
<th> Updates Working Dir? </th>
<th> Working Dir Safe?                               </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>reset --soft [commit]</code>    </td>
<td> YES                     </td>
<td> NO             </td>
<td> NO                   </td>
<td> YES                                             </td>
</tr>
<tr>
<td> <code>reset (--mixed) [commit]</code> </td>
<td> YES                     </td>
<td> YES            </td>
<td> NO                   </td>
<td> YES                                             </td>
</tr>
<tr>
<td> <code>reset --hard [commit]</code>    </td>
<td> YES                     </td>
<td> YES            </td>
<td> YES                  </td>
<td> <span style="color: rgb(255, 38, 0);">NO</span> </td>
</tr>
<tr>
<td> <code>checkout [commit]</code>        </td>
<td> NO                      </td>
<td> YES            </td>
<td> YES                  </td>
<td> YES                                             </td>
</tr>
</tbody>
</table>


<p><strong>reset &#45;&#45;soft [commit]</strong><br/>
When given <code>HEAD~</code>, this undos the git commit<br/>
Will move the current branch back to the given commit, but not update the index or working directory<br/>
This provides similar functionality as <code>git checkout --amend</code> (but changing the whole commit, not just the message)</p>

<p><strong>reset (&#45;&#45;mixed) [commit] <span style="color: rgb(160, 160, 160); font-weight: normal;">(default form)</span></strong><br/>
When given <code>HEAD~</code>, this undos the <code>git commit</code> and the <code>git add</code><br/>
Will move the current branch and update the index, but working directory will remain untouched</p>

<p><strong>reset &#45;&#45;hard [commit] <span style="color: rgb(255, 38, 0);">(unsafe)</span></strong><br/>
When given <code>HEAD~</code>, this undos the <code>git commit</code>, <code>git add</code> and also the changes in the working directory<br/>
Will update all three trees to match the given commit<br/>
This is useful to remove commits you don’t want<br/>
From a clean working tree, it is also useful to undo a conflicted (or not conflicted) <code>git merge</code> or a <code>git pull</code><br/>
From a dirty working tree, use <code>--merge</code> instead, this will safely preserve your local changes<br/>
The <code>--keep</code> option is useful when removing some of the last commits while safely keeping your local changes</p>

<p><strong>checkout [commit]</strong><br/>
When given <code>HEAD~</code>, this will safely update the working directory and the index without moving the current branch<br/>
This will leave you in a <em>detached HEAD</em> state</p>

<h2>File level</h2>

<table>
<thead>
<tr>
<th>                            </th>
<th> Updates Current Branch? </th>
<th> Updates Index? </th>
<th> Updates Working Dir? </th>
<th> Working Dir safe?                               </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>reset (commit) [file]</code>    </td>
<td> NO                      </td>
<td> YES            </td>
<td> NO                   </td>
<td> YES                                             </td>
</tr>
<tr>
<td> <code>checkout (commit) [file]</code> </td>
<td> NO                      </td>
<td> NO             </td>
<td> YES                  </td>
<td> <span style="color: rgb(255, 38, 0);">NO</span> </td>
</tr>
</tbody>
</table>


<p><strong>reset (commit) [file]</strong><br/>
When given a file path, the first step of updating the branch that <code>HEAD</code> points to is skipped<br/>
Will update the index only to match commit, leaving both working directory and current branch untouched<br/>
From here, you could use <code>git checkout</code> to make the working directory match the index, although <code>git checkout</code> can do that with one command (see below)<br/>
The commit parameter will default to <code>HEAD</code> which effectively <em>un-stages</em> files</p>

<p><strong>checkout (commit) [file] <span style="color: rgb(255, 38, 0);">(unsafe)</span></strong><br/>
Updates the working directory only, without changing the index, current branch or even what <code>HEAD</code> is pointing to<br/>
This would effectively be <code>git reset --hard [branch] file</code>, but this command does not exist</p>

<p>More info and examples in <code>git reset --help</code></p>
]]></content>
  </entry>
  
</feed>
